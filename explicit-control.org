* The Explicit-Control Evaluator 
:PROPERTIES:
:header-args: :session scheme :results verbatim raw
:ARCHIVE:
:END:

The explicit-control evaluator that we develop in this section shows how the underlying procedure-calling and argument-passing mechanisms used in the evaluation process can be described in terms of operations on registers and stacks. 

** Registers and Operations  

In designing the explicit-control evaluator, we must specify the operations to be used in our register machine. In our evaluator, we used procedures like quoted? and make-procedure; here we could expand this into sequences of elementary list-structure memory operations. This would make our evaluator very long, obscuring the details of the structure itself. To clarify the presentation, we assume primitive operations given in previous sections. In order to completely specify an evaluator that could be programmed in a low-level machine language or implemented in hardware, we could replace these operations by more elementary operations using the list-structure implementation given in the previous section. 

Our scheme evaluator register machine includes a stack and seven registers:

- exp - used to hold the expression to be evaluated
- env - contains the environment in which evaluation is to be performed 
- val - contains the value obtained by evaluating the expression in the designated environment 
- continue - used to implement recursion
- proc - the last 3 are used in evaluating combinations 
- argl
- unev

** The Core of the Explicit-Control Evaluator 

The central element in the evaluator is the sequence of instructions beginning at eval-dispatch. It evaluates the expression specified by exp in the environment specified by env. When evaluation is complete, the controller will go to the entry point stored in continue, and the val register will hold the value of the expression. 

As with the metacircular eval, the structure of eval-dispatch is a case analysis on the syntactic type of the expression to be evaluated (in a real system, it would likely be a data directed implementation): 

#+BEGIN_SRC scheme
(...
 eval-dispatch
 (test (op self-evaluating?) (reg exp))
 (branch (label ev-self-eval))
 (test (op variable?) (reg exp))
 (branch (label ev-variable))
 (test (op quoted?) (reg exp))
 (branch (label ev-quoted))
 (test (op definition?) (reg exp))
 (branch (label ev-definition))
 (test (op if?) (reg exp))
 (branch (label ev-if))
 (test (op lambda?) (reg exp))
 (branch (label ev-lambda))
 (test (op begin?) (reg exp))
 (branch (label ev-begin))
 (test (op application?) (reg exp))
 (branch (label ev-application))
 (goto (label unknown-expression-type))
 ...)
#+END_SRC

** Evaluating Simple Expressions 

Numbers, string, variables, quotations, and lambda expressions have no subexpressions to be evaluated. For these, the evaluator simply places the correct value in the val register and continues execution at the entry point specified by continue. 

#+BEGIN_SRC scheme
(...
 ev-self-eval
 (assign val (reg exp))
 (goto (reg continue))
 ev-variable
 (assign val (op lookup-variable-value) (reg exp) (reg env))
 (goto (reg continue))
 ev-quoted
 (assign val (op text-of-quotation) (reg exp))
 (goto (reg continue))
 ev-lambda
 (assign unev (op lambda-parameters) (reg exp))
 (assign exp (op lambda-body) (reg exp))
 (assign val (op make-procedure) (reg unev) (reg exp) (reg env))
 (goto (reg continue))
 ...)
#+END_SRC

** Evaluating Procedure Applications 

A procedure application is specified by a combination containing an operator and operands. The operator is a subexpression whose value is a procedure, and the operands are subexpressions whose values are the arguments to which the procedure should be applied. 

#+BEGIN_SRC scheme
(...
 ev-application
 (save continue)
 (save env)
 (assign unev (op operands) (reg exp))
 (save unev)
 (assign exp (op operator) (reg exp))
 (assign continue (label ev-appl-did-operator))
 (goto (label ev-dispatch))
 ...
 ev-appl-did-operator
 (restore unev) ; the operands
 (restore env)
 (assign argl (op empty-arglist))
 (assign proc (reg val)) ; the operator
 (test (op no-operands?) (reg unev))
 (branch (label apply-dispatch))
 (save proc)
 ...
 ev-appl-operand-loop ; special case for eval of the last operand
 (save argl)
 (assign exp (op first-operand) (reg unev))
 (test (op last-operand?) (reg unev))
 (branch (label ev-appl-last-arg))
 (save env)
 (save unev)
 (assign continue (label ev-appl-accumulate-arg))
 (goto (label eval-dispatch))
 ...
 ; when an operand has been evaluated, the val is accumulated into the list held in argl
 ev-appl-accumulate-arg
 (restore unev)
 (restore env)
 (restore argl)
 (assign argl (op adjoin-arg) (reg val) (reg argl))
 (assign unev (op rest-operands) (reg unev))
 (goto (label ev-appl-operand-loop))
 ...
 ; special handling of the last argument
 ev-appl-last-arg
 (assign continue (label ev-appl-accum-last-arg))
 (goto (label eval-dispatch))
 ev-appl-accum-last-arg
 (restore argl)
 (assign argl (op adjoin-arg) (reg val) (reg argl))
 (restore proc)
 (goto (label apply-dispatch)))
#+END_SRC

** Procedure Application 



