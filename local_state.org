* Modularity, Objects, and State
:PROPERTIES:
:header-args: :session scheme :results value
:ARCHIVE:
:END:

In the previous chapters we saw how primitive procedures and primitive data are combined to construct compound entities, and we learned that abstraction is vital in helping us to cope with the complexity of large systems. 

Effective program synthesis also requires organizational principles that can guide us in formulating the overall design of a program. We need strategies to help us structure large systems so that they will be modular. 

The way we organize a large program is dictated by our perception of the system to be modeled. In this chapter we view two different world views of the structure of systems. 

- The first stategy is to view a large system as a collection of objects whose behaviors may change over time
- An alternative concentrates on the streams of information that flow in the system 

With objects, we must be concerned with how a computational object can change and yet maintain its identity. This means we must abandom our substitution model of computation in favor of the more mechanistic, but less theoretically tractable, environment model of computation. The difficulties of dealing with objects, change, and identity are a fundamental consequence of the need to grapple with time in our computational models. These difficulties become greater when we allow the possibility of concurrent execution of programs. 

The stream approach can be most fully exploited when we decouple simulated time in our model from the order of the events that must take place in the computer during evaluation. We will accomplish this using a technique known as delayed evaluation. 

** Assignment and Local State

The objects in a system composed of many objects are rarely completely independent. The view that a system is composed of separate objects is most useful when the state variables of the system can be grouped into closely coupled subsystems that are only loosely coupled to other subsystems. 

Each computational object must have its own local state variables describing the objects state. The state variables of the computational objects must be able to change over time. If we wish to model state variables by ordinary symbolic names in the programming language, then the language must provide an assignment operator to enable us to change the value associated with a name.

** Local State Variables  

#+BEGIN_SRC scheme
(define balance 100)

(define (withdraw amount)
  (if (>= balance amount)
      (begin (set! balance (- balance amount)) balance)
      "Insufficient Funds"))

(withdraw 20)
(withdraw 25)
(withdraw 50)
(withdraw 6)
#+END_SRC

#+RESULTS:

We can make balance internal to withdraw by rewriting the procedure as follows:

#+BEGIN_SRC scheme
(define new-withdraw
  (let ((balance 100))
    (lambda (amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient Funds"))))

(define new-withdraw-2
  (let ((balance 100))
    withdraw))

(new-withdraw 20)
(new-withdraw-2 20) 
#+END_SRC

#+RESULTS:
: Insufficient Funds

Within this local environment, we use lambda to create a procedure that takes amount as an argument and behaves like our previous withdraw procedure. This procedure, returned as a result of evaluating the let expression behaves in precisely the same way as withdraw, but whose variable balance is not accessible by any other procedure. 

The variable balance is said to be encapsulated within the new procedure. This principle is known as the hiding principle: One can make a system more modular and robust by protecting parts of the system from each other. 

The following procedure, make-withdraw, creates "withdrawl processors".

#+BEGIN_SRC scheme
(define (make-withdraw balance)
  (lambda (amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient Funds")))

(define W1 (make-withdraw 100))
(define W2 (make-withdraw 100))

(W1 50)
(W2 70)
#+END_SRC

#+RESULTS:
: 30

Observe that W1 and W2 are completely independent objects, each with its own local state variable balance. 

We can also create objects that handle deposits as well as withdrawls, and thus represent simple bank accounts. 

#+BEGIN_SRC scheme
(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient Funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown Request: MAKE-ACCOUNT" m))))
  dispatch)
#+END_SRC

#+RESULTS:
: make-account

Each call to make-account sets up an environment with a local state variable balance. Within this environment, make-account defines procedures deposit and withdraw that access balance and an additional procedure dispatch that takes a message as input and returns one of the two local procedures. The dispatch procedure is returned as the value that represents the bank-account object. This is the message-passing style of programming that we saw earlier, although now we are using it in conjunction with the ability to modify local variables. 

#+BEGIN_SRC scheme
(define acc (make-account 100))

((acc 'withdraw) 50)
((acc 'deposit) 20)
((acc 'withdraw) -10)
#+END_SRC

#+RESULTS:
: 80

*** Exercise 3.1 

An accumulator is a procedure that is called repeatedly with a single numeric argument and accumulates its arguments into a sum. Each time it is called it returns the currently accumulated sum. Write a procedure make-accumulator that generates accumulators, each maintaining an independent sum. The input to make-accumulator should specify the initial value of the sum.

#+BEGIN_SRC scheme
(define (make-accumulator start)
  (lambda (add)
    (set! start (+ start add))
    start))

(define (reset-accumulator acc)
  (acc (- (acc 0))))

(define howdy (make-accumulator 0))

(reset-accumulator howdy)

(howdy 1)
(howdy (- (howdy 0)))
(howdy 1)
#+END_SRC

#+RESULTS:
: 0

*** Exercise 3.2

In software-testing applications, it is useful to be able to count the number of times a given procedure is called during the course of a computation. 

Write a procedure make-monitored that takes as input a procedure, f, that itself takes one input. The result, returned by make-monitored is a third procedure, say mf, that keeps track of the number of times it has been called by maintaining an internal counter. 

If the input to mf is the special symbol reset-count, then mf resets the counter to 0. For any other input, mf returns the result of calling f on that input and increments the counter.

#+BEGIN_SRC scheme
(define (make-monitored f)
  (define how-many? (make-accumulator 0))
  (define (reset-accumulator acc)
    (acc (- (acc 0))))
  (define (mf m)
    (cond ((eq? m 'how-many?) (how-many? 0))
          ((eq? m 'reset) (reset-accumulator how-many?))
          (else (begin (how-many? 1)
                       (f m)))))
    mf)

(define b (make-monitored sqrt))
(b 100)
10

(b 'how-many?)
1

(b 'reset)
(b 100)
(b 'how-many?)
#+END_SRC

*** Exercise 3.3 

Modify the make-account procedure so that it creates password protected accounts. That is, make-account should take a symbol as an additional argument, as in 

#+BEGIN_SRC scheme
(define acc (make-account 100 'secret-password))
#+END_SRC

The resulting object should process a request only if it is accompanied by the password with which the account was created, and should otherwise return a complaint. 

#+BEGIN_SRC scheme
((acc 'secret-password 'withdraw) 40) 
60
((acc 'seret-password 'deposit) 50)
"Incorrect Password"
#+END_SRC

#+BEGIN_SRC scheme

(define (make-account balance initial-password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient Funds"))
  
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown Request: MAKE-ACCOUNT" m))))

  (define (get-method password m)
    (if (eq? password initial-password)
        (dispatch m)
        "Incorrect Password"))
  get-method)

#+END_SRC

*** Exercise 3.4 

Modify the make-account procedure of 3.3 by adding another local state variable so that, if an account is accessed more than seven consecutive times with an incorrect password, it invokes the procedure call-the-cops. 

use make-monitored. If how-many? < 7 then its fine, else call-the-cops. Accumulate +1 only if incorrect password. 

#+BEGIN_SRC scheme
(define (make-account balance initial-password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient Funds"))
  
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown Request: MAKE-ACCOUNT" m))))

  (define call-the-cops "oh no!")
  
  (define (get-method password m)
    (if (eq? password initial-password)
        (dispatch m)
        "Incorrect Password"))

  (define add-to-counter (make-monitored get-method))
  
  (if (< (add-to-counter 'how-many?) 7)
      get-method
      (call-the-cops)))
#+END_SRC

#+BEGIN_SRC scheme

(define acc (make-account 100 'secret-password))

((acc 'secret-password 'withdraw) 40)
((acc 'seret-password 'deposit) 50)

#+END_SRC

Took someone else's code here

#+BEGIN_SRC scheme
(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient Funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define call-the-cops "weewooweewoo")
  (define (password-errors monitored)
    (lambda (m)
      (let ((wrong-times (monitored 'how-many?)))
        (if (= wrong-times 7)
            (begin (wrong-times 'reset)
                   (call-the-cops))
            (monitored
             (if (eq? m 'reset)
                 'reset
                 (- 7 wrong-times)))))))
  (define counter
    (password-errors
     (make-monitored
      (lambda (m)
        (string-append
         "Incorrect Password: "
         "You can still enter "
         (number->string m)
         " wrong times.")))))
  (define (dispatch p m)
    (if (eq? p password)
        (begin
          (counter 'reset-count)
          (cond ((eq? m 'withdraw) withdraw)
                ((eq? m 'deposit) deposit)
                (else (error "Unknown Request -- MAKE-ACCOUNT" m))))
        counter))
  dispatch)
#+END_SRC

#+BEGIN_SRC scheme
(define acc (make-account 100 'secret-password))
#+END_SRC

#+BEGIN_SRC scheme
((acc 'secret-password 'deposit) 40)
#+END_SRC

#+BEGIN_SRC scheme
((acc 'seret-password 'deposit) 50)
#+END_SRC

** The Benefits of Introducing Assignment

We could implement rand as a procedure with a local state variable x that is initialized to some fixed value random-init. Each call to rand computes rand-update of the current value of x, returns this as the random number, and also stores this as a new value of x. 

#+BEGIN_SRC scheme
(define rand
  (let ((x random-init))
    (lambda ()
      (set! x (rand-update x))
      x)))
#+END_SRC

We could generate the same sequence of random numbers without using assignment by simply calling rand-update directly. This would mean that any part of our program that used random numbers would have to explicitly remember the current value of x to be passed as an argument to rand-update.

The Monte Carlo method consists of choosing sample experiments at random from a large set and then making deductions on the basis of the probabilities estimated from tabulating the results of those experiments. 

#+BEGIN_SRC scheme
(define (estimate-pi trials)
  (sqrt (/ 6 (monte-carlo trials cesaro-test))))

(define (cesaro-test)
  (= (gcd (rand) (rand)) 1))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1)
                 (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1)
                 trials-passed))))
  (iter trials 0))

(estimate-pi 1000)
#+END_SRC

Now let us try the same computation using rand-update directly rather than rand, the way we would be forced to proceed if we did not use assignment to model local state. 

#+BEGIN_SRC scheme
(define (estimate-pi trials)
  (sqrt (/ 6 (random-gcd-test trials random-init))))

(define (random-gcd-test trials initial-x)
  (define (iter trials-remaining trials-passed x)
    (let ((x1 (rand-update x)))
      (let ((x2 (rand-update x1)))
        (cond ((= trials-remaining 0)
               (/ trials-passed trials))
              ((= (gcd x1 x2) 1)
               (iter (- trials-remaining 1)
                     (+ trials-passed 1)
                     x2))
              (else
               (iter (- trials-remaining 1)
                     trials-passed
                     x2))))))
  (iter trials 0 initial-x))
#+END_SRC

** Exercise 3.5 

Monte Carlo Integration is a method of estimating definite integrals by means of Monte Carlo simulation. 

Consider conputing the area of a region of space described by the predicate P(x, y) that is true for points (x, y) in the region and false for points not in the region. To estimate the area of the region described by such a predicate, begin by choosing a rectangle that contains the region. The desired integral is the area of the portion of the rectangle that lies in that region. 

We can estimate the integral by picking, at random, point (x,y) that lie in the rectangle and testing P(x,y) for each point to determine whether the point lies in the region. If we try this with many points, then the fraction of points that fall in the region should give an estimate of the proportion of the rectangle that lies in the region. This will, in turn, give us an estimate of the integral. 

#+BEGIN_SRC scheme
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))

(define (circle-func x y)
  (<= (+ (expt (- x 5) 2)
         (expt (- y 7) 2))
      (expt 3 2)))

(define (estimate-integral pred x1 x2 y1 y2 trials)
  (define (experiment)
    (pred (random-in-range x1 x2)
          (random-in-range y1 y2)))
  (monte-carlo trials experiment))

(estimate-integral circle-func 2.0 8.0 4.0 10.0 10000.0)

(/ (* .7868
      (* 6 6.0))
   9)

(* 3.14 (* 9))
#+END_SRC

** Exercise 3.6

It is useful to be able to reset a random number generator to produce a sequence starting from a given value. Design a new rand procedure that is called with an argument that is either the symbol generate or the symbol reset and behaves as follows:

- (rand 'generate) produces a new random number 
- ((rand 'reset) <new value>) resets the internal state variable to the designated new value.

Thus, by resetting the state, one can generate repeatable sequences. These are very handy to have when testing and debugging programs that use random numbers. 

#+BEGIN_SRC scheme
(define (knuth-update x)
  (let ((a 25)
        (b 24)
        (m 123))
    (modulo (+ (* a x) b) m)))

(define (make-rand)
  (let ((seed 0))
    (define (dispatch m)
      (cond ((eq? m 'reset)
             (lambda (val) (set! seed val)))
            ((eq? m 'generate)
             (begin (set! seed (knuth-update seed))
                    seed)))))
  dispatch)

(rand 'generate)
((rand 'reset) 0)
(rand 'generate)
#+END_SRC

** The Costs of Implementing Assignment 

Programming without any use of assignments, as we did throughout the first two chapters of the book, is accordingly known as functional programming. 

To understand how assignment complicates matters, consider a simplified version of the make-withdraw procedure that does not bother to check for an insufficient amount:

#+BEGIN_SRC scheme
(define (make-simplified-withdraw balance)
  (lambda (amount)
    (set! balance (- balance amount))
    balance))

(define W (make-simplified-withdraw 25))

(w 20)
#+END_SRC

Compare this procedure with the following make-decrementer procedure which does not use set!

#+BEGIN_SRC scheme
(define (make-decrementer balance)
  (lambda (amount)
    (- balance amount)))
#+END_SRC

This does not have a state, so it always gives the same output for the same input. 

#+BEGIN_SRC scheme
(define D (make-decrementer 25))

(d 20)
(d 10)
#+END_SRC

The trouble here is that substitution is based ultimately on the notion that the symbols in our language are essentially names for values. But as soon as we introduce set! and the idea that the value of a variable can change, a variable can not longer be simply a name. Now a variable somehow refers to a place where a value van be stored, and the value stored at this place can change. 

*** Sameness and Change 

A language that supports the concept that "equals can be substituted for equals" in an expression is said to be referentially transparent. Referential transparency is violated when we include set! in our computer language. 

*** Pitfalls of Imperative Programming 

In contrast to functional programming, programming that makes extensive use of assignment is known as imperative programming. In addition to raising complications about computational models, programs written in imperative style are susceptible to bugs that cannot occur in functional programs. 

Recall the iterative factorial program:

#+BEGIN_SRC scheme
(define (factorial n)
  (define (iter product counter)
    (if (= counter 0)
        product
        (iter (* product counter)
              (- counter 1))))
  (iter 1 n))

(factorial 3)
#+END_SRC

Instead of passing arguments in the internal iterative loop, we could adopt a more imperative style by using explicit assignment to update the values of the variables product and counter:

#+BEGIN_SRC scheme
(define (factorial n)
  (let ((product 1)
        (counter 1))
    (define (iter)
      (if (> counter n)
          product
          (begin (set! product (* counter product))
                 (set! counter (+ counter 1))
                 (iter))))
    (iter)))

(factorial 5)
#+END_SRC

This does not change the results, but it does introduce a subtle trap. How do we decide the order of the assignments? 

Writing the assignments in the opposite order

#+BEGIN_SRC scheme
(set! counter (+ counter 1))
(set! product (* counter product))
#+END_SRC

would have produced a different, incorrect result. In general, programming with assignment forces us to carefully consider the relative orders of the assignments to make sure that each statement is using the correct version of the variables that have been changed. This issue does not occur in functional programs. 

*** Exercise 3.7 

Suppose that our banking system requires the ability to make joint accounts. Define a procedure make-joint that accomplishes this. 

make-joint should take three arguments: 

- a password protected account
- the second arg must match the password with which the account was defined in order for the make-joint operation to proceed
- a new password 

For example, if peter-acc is a bank account with password open-sesame, then 

#+BEGIN_SRC scheme
(define paul-acc (make-joint peter-acc 'open-sesame 'rosebud))
#+END_SRC

will allow one to make transactions on peter-acc using the name paul-acc and the password rosebud. 

Here is the solution to 3.3 

#+BEGIN_SRC scheme
(define (make-account balance initial-password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient Funds"))
  
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown Request: MAKE-ACCOUNT" m))))

  (define (get-method password m)
    (if (eq? password initial-password)
        (dispatch m)
        "Incorrect Password"))
  get-method)
#+END_SRC

#+BEGIN_SRC scheme
(define paul-acc (make-account 100 'open-sesame))
((paul-acc 'open-sesame 'deposit) 10)

(define (make-joint acc1 a1pw initial-password)
  (define (withdraw amount)
    ((acc1 a1pw 'withdraw) amount))
  (define (deposit amount)
    ((acc1 a1pw 'deposit) amount))
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown Request: MAKE-JOINT"))))
  (define (get-method password m)
    (if (eq? password initial-password)
        (dispatch m)
        "Incorrect Password"))
  get-method)

(define peter-acc (make-joint paul-acc 'open-sesame 'rosebud))

((peter-acc 'rosebud 'withdraw) 10)
#+END_SRC

*** Exercise 3.8 

When we defined the evaluation model in 1.1.3, we said that the first step in evaluating an expression is evaluate its subexpressions. But we never specified which order. When we introduce assignment, the order in which the arguments to a procedure are evaluated can make a difference to the result. Define a simple procedure f such that evaluating 

#+BEGIN_SRC scheme
(+ (f 0)
   (f 1))
#+END_SRC

will return 0 if the arguments to + are evaluated from left to right but will return 1 if the arguments are evaluated from right to left. 

#+BEGIN_SRC scheme
(define f
  (let ((count 1))
    (lambda (x)
      (set! count (* count x))
      count)))

(+ (f 0)
   (f 1))

(+ (f 1)
   (f 0))
#+END_SRC

I don't really get this solution. 
