* The Environment Model of Evaluation 
:PROPERTIES:
:header-args: :session scheme :results value
:END:

In the presence of assignment in our language, a variable can no longer be considered to be merely a name for a value. Rather, a value must somehow designate a place in which values can be stored. In our new model, these places will be maintained in structures called environments. 

An environment is a sequence of frames. Each frame is a table of bindings which associate variable names with their corresponding values. Each frame also has a pointer to its enclosing environment unless the frame is considered to be global. The value of a variable with respect to an environment is the value given by the binding of the variable in the first frame in the environment that contains that variable. If no rame is the sequence specifies a binding for the variable, then the variable is said to be unbound. 

The environment is crucial to the evaluation process, because it determines the context in which an expression should be evaluated. 

** The Rules for Evaluation 

In the environment model of evaluation, a procedure is always a pair consisting of some code and a pointer to an environment. 

To describe how procedures are applied, the environment model specifies:

To apply a procedure to arguments, create a new environment containing a frame that binds the parameters to the values of the arguments. The enclosing environment of this frame is the environment specified by the procedure. Now, within this new environment, evaluate the procedure body. 

The environment model of procedure application can be summarized by two rules: 

- A procedure object is applied to a set of arguments by constructing a frame, binding the formal parameters of the procedure to the arguments of the call, and then evaluating the body of the procedure in the context of the new environment constructed. The new frame has as its enclosing environment the environment part of the procedure object being applied. 
- A procedure is created by evaluating a lambda expression relative to a given environment. The resulting procedure object is a pair consisting of the text of the lambda expression and a pointer to the environment in which the procedure was created. 


** Applying Simple Procedures 

#+BEGIN_SRC scheme
(define (square x)
  (* x x))

(define (sum-of-squares x y)
  (+ (square x)
     (square y)))

(define (f a)
  (sum-of-squares (+ a 1)
                  (* a 2)))
#+END_SRC

#+RESULTS:

*** Exercise 3.9 

Taken from the schemewiki: 


RECURSIVE VERSION

global  ________________________
env     | other var.            |
------->| factorial : *         |
        |             |         |
        |_____________|_________|
                      |     ^
                      |     |
                variables : n
                body: (if (= n 1) 1 (* n (factorial (- n 1))))

(factorial 6)

         _______            ^
  E1 -->| n : 6 |___________| GLOBAL
         -------
        (* 6 (factorial 5))
         _______            ^
  E2 -->| n : 5 |___________| GLOBAL
         -------
        (* 5 (factorial 4))
         _______            ^
  E3 -->| n : 4 |___________| GLOBAL
         -------
        (* 4 (factorial 3))
         _______            ^ 
  E4 -->| n : 3 |___________| GLOBAL
         -------
        (* 3 (factorial 2))
         _______            ^
  E5 -->| n : 2 |___________| GLOBAL
         -------
        (* 2 (factorial 1))
         _______            ^
  E6 -->| n : 1 |___________| GLOBAL
         -------
         1

ITERATIVE VERSON

global  ___________________________________
env     | other var.                       |
------->| factorial : *                    |
        | fact-iter : |               *    |
        |_____________|_______________|____|
                      |       ^       |  ^
                      |       |       |  |
                      |       |       variable : (product counter max-count)
                      |       |       body: (if (> counter max-count) 
                      |       |                 prod 
                      |       |                 (fact-iter (* counter product)
                      |       |                            (+ counter 1)
                      |       |                            max-count))
                      |       |
                variable: n
                body: (fact-iter 1 1 n)

(factorial 6)

         _______              ^
  E1 -->| n : 6 |_____________| GLOBAL  
         -------
         (fact-iter 1 1 n)

  E2 -->| product   : 1       ^
        | counter   : 1    ___| GLOBAL 
        | max-count : 6
         (fact-iter 1 2 6)

  E3 -->| product   : 1       ^
        | counter   : 2   ____| GLOBAL
        | max-count : 6
         (fact-iter 2 3 6)

  E4 -->| product   : 2       ^
        | counter   : 3  _____| GLOBAL
        | max-count : 6
         (fact-iter 6 4 6)

  E5 -->| product   : 6       ^
        | counter   : 4  _____| GLOBAL
        | max-count : 6
         (fact-iter 24 5 6)

  E6 -->| product   : 24      ^
        | counter   : 5  _____| GLOBAL
        | max-count : 6
         (fact-iter 120 6 6)

  E7 -->| product   : 120     ^
        | counter   : 6  _____| GLOBAL
        | max-count : 6
         (fact-iter 720 7 6)

  E8 -->| product   : 720     ^
        | counter   : 7  _____| GLOBAL
        | max-count : 6
         720

** Frames as the Repository of Local State

We can turn to the environment model to see how procedures and assignment can be used to represent objects with local state.

Consider the withdrawl processor: 

#+BEGIN_SRC scheme
(define (make-withdraw balance)
  (lambda (amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient Funds")))

(define w1 (make-withdraw 100))
#+END_SRC

#+BEGIN_SRC scheme
(w1 50)
#+END_SRC

#+RESULTS:
: 0

#+BEGIN_SRC scheme
(define w2 (make-withdraw 100))
#+END_SRC

*** Exercise 3.10 

In the make-withdraw procedure, the local variable balance is created as a parameter of make-withdraw. We could also create the local state variable explicitly, using let, as follows:

#+BEGIN_SRC scheme
(define (make-withdraw initial-amount)
  (let ((balance initial-amount))
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient Funds")))
#+END_SRC

Recall from 1.3.2 that let is syntactic sugar for a procedure call: 

(let ((<var> <exp>)) <body>)

is interpreted as an alternate syntax for 

((lambda (<var>) <body>) <exp>)

Use the environment model to analyze this alternate version of make-withdraw, drawing figures like the ones above to illustrate the interactions 

#+BEGIN_SRC scheme
(define w1 (make-withdraw 100))
(w1 50)
(define w2 (make-withdraw 100))
#+END_SRC 

Show that the two versions of make-withdraw create objects with the same behaviour. How do the environment structures differ for the two versions?

Taken from schemewiki: 

(define W1 (make-withdraw 100))

When make-withdraw is evaluated, E0 is created with Frame A having the
initial-mount binding. Next, as a result of the evaluation of the 
anonymous function (generated by the set structure), Frame B is created
with the binding of balance (E1 is the pointer to this frame).

         _______________________
global->| make-withdraw : *     |
env.    | W1 :  *         |     |
         -------|---^-----|---^-
                |   |     |   |
                |   |     parameter: initial-mount
                |   |     body: ((lambda (balance) ((...))) initial-mount)
                |   |
                |  _|___Frame_A__________
                | | initial-mount : 100  |<- E0
                |  -^--------------------
                |   |
                |  _|__________Frame_B______
                | | balance : initial-mount | <- E1
                |  -^-----------------------
                |   |
                parameter: amount
                body: (if (>= balance amount) ... )

(W1 50)

Set! will affect Frame B, initial-mount remains unchanged in Frame A. 
         _______________________
global->| make-withdraw : *     |
env.    | W1 :  *         |     |
         -------|---^-----|---^-
                |   |     |   |
                |   |     parameter: initial-mount
                |   |     body: ((lambda (balance) ((...))) initial-mount)
                |   |
                |  _|___Frame_A__________
                | | initial-mount : 100  |<- E0
                |  -^--------------------
                |   |
                |  _|__________Frame_B___
                | | balance : 50         | <- E1
                |  -^--------------------
                |   |
                parameter: amount
                body: (if (>= balance amount) ... )


** Internal Definitions 

Section 1.1.8 introduced the idea that procedures can have internal definitions, thus leading to a block structure as in the following: 

#+BEGIN_SRC scheme
(define (sqrt x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))
#+END_SRC

The environment model explains the two key properties that make local procedure definitions a useful technique for modularizing programs:

- The names of the local procedures do not interfere with names external to the enclosing procedure, because the local procedure names will be bound in the frame that the procedure creates when it is run, rather than being bound in the global environment.
- The local procedures can access the arguments of the enclosing procedure, simply by using parameter names as free variables. This is because the body of the local procedure is evaluated in an environment that is subordinate to the evaluation environment for the enclosing procedure. 


*** Exercise 3.11

In 3.2.3 we saw how the environment model described the behavior of procedures with local state. Now we have seen how internal definitions work. A typical message-passing procedure contains both of these aspects. 

Consider 

#+BEGIN_SRC scheme
(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient Funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else
           (error "Unknown Request -- MAKE-ACCOUNT" m))))
  dispatch)
#+END_SRC

Show the environment structure generated by the sequence of interactions: 

#+BEGIN_SRC scheme
(define acc (make-account 50))
((acc 'deposit) 40)
((acc 'withdraw) 60)
#+END_SRC

From schemewiki: 

(define acc (make-account 50))

global   _________________________________
env  -->| make-account :*                 |
        | acc : *       |                 |
         -------|-------|---^-----------^-
                |       |   |           |
                |     ( * , * )         |
                |       |               |
                        parameter: balance
                |       body: (define (withdraw ... ))
                |                       |
                |                -------Frame 0-      (parameter, body)
                |               | balance  : 50 |      |
                |           E0->| withdraw : *--|--> ( * , * )  
                |               | deposit  : *--|--> ( * , * ) 
                |               | dispatch : *--|--> ( * , * )     
                |                -------^----^--           |
                |    ___________________|    |_____________| 
                |   |
              ( * , * )
                |
                parameter : m           
                body      : (cond ((eq? m ... )))               

((acc 'deposit) 40)

Frame 1 is created when (acc 'deposit is evaluated).
Next, Frame 2 is created when (deposit amount). Since deposit is defined
in E0, Frame 2 pointer is to environment E0.

global   _________________________________
env  -->| make-account :*                 |
        | acc : *                         |
         -------|-----------------------^-
                |                       |
                |                -------Frame 0-
                |               | balance  : 50 |
              ( *, *-)--------->| withdraw : *  |
                                | deposit  : *  |<- E0
                                | dispatch : *  |
                                 -^-----^------- (make-account balance)
                         _________|     |
                        |        -------Frame 1-
                        |       | m : 'deposit  |<- E1 
                        |        --------------- (dispatch m)
                 -------Frame 2-
                | amount : 40   |<- E2
                 --------------- (deposit amount)

After ((acc 'deposit) 40) evaluation balance is set to 90 in Frame 0 and
Frames 1 and 2 are not relevant anymore.

global   _________________________________
env  -->| make-account :*                 |
        | acc : *                         |
         -------|-----------------------^-
                |                       |
                |                -------Frame 0-
                |               | balance  : 90 |
              ( *, *-)--------->| withdraw : *  |
                                | deposit  : *  |<- E0
                                | dispatch : *  |
                                 --------------- 

((acc 'withdraw) 60)

global   _________________________________
env  -->| make-account :*                 |
        | acc : *                         |
         -------|-----------------------^-
                |                       |
                |                -------Frame 0-
                |               | balance  : 90 |
              ( *, *-)--------->| withdraw : *  |
                                | deposit  : *  |<- E0
                                | dispatch : *  |
                                 -^-----^------- (make-account balance)
                         _________|     |
                        |        -------Frame 3-
                        |       | m : 'withdraw |<- E3
                        |        --------------- (dispatch m)
                 -------Frame 4-
                | amount : 60   |<- E4
                 --------------- (withdraw amount)

After ((acc 'withdraw) 60)

global   _________________________________
env  -->| make-account :*                 |
        | acc : *                         |
         -------|-----------------------^-
                |                       |
                |                -------Frame 0-
                |               | balance  : 30 |
              ( *, *-)--------->| withdraw : *  |
                                | deposit  : *  |<- E0
                                | dispatch : *  |
                                 ---------------

Where is the local state for acc kept? 

The local states for each account are kept separate, whereas the procedure definitions for both accounts are shared. 

Suppose we define another account 

#+BEGIN_SRC scheme
(define acc2 (make-account 100))
#+END_SRC

How are the local states for the two accounts kept distinct? Which parts of the environment structure are shared between acc1 and acc2?

The environment doesn't share anything, but both of their pointers to body procedures point to the same procedures. 


