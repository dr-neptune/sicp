* Hierarchical Data and the Closure Property 
:PROPERTIES:
:header-args: :session scheme :results value
:END:

The ability to create pairs whose elements are pairs is the essence of the list structures importance as a representational tools. We refer to this ability as the closure property of cons. 

In general, an operation for combining data objects satisfies the closure property if the results of combining things with that operation can themselves be combined using the same operation. 

Closure is the key to power in any means of combination because it permits us to create hierarchical structures -- structures made up of parts, which themselves are made up of parts, and so on. 

** Representing Sequences 

One of the useful structures we can build with pairs is a sequence - an ordered collection of data objects. 

#+BEGIN_SRC scheme
(cons 1 (cons 2 (cons 3 (cons 4 'nil))))
#+END_SRC

#+RESULTS:

Such a sequence of pairs, formed by nested conses, is called a list. We could have also made the structure above with the list function 

#+BEGIN_SRC scheme
(list 1 2 3 4)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC scheme
(define one_through_four (list 1 2 3 4))
#+END_SRC

#+RESULTS:
: one_through_four

#+BEGIN_SRC scheme
(car one_through_four)
(cdr one_through_four)
(cadr one_through_four)
(car (cdr (cdr one_through_four)))
#+END_SRC

#+RESULTS:
: 3

*** List Operations 

- for n = 0, list-ref should return the car of the list
- otherwise, list-ref should return the (n - 1)st item of the cdr of the list 

#+BEGIN_SRC scheme
(define squares (list 1 4 9 16 25))

(define (list-ref items n)
  (if (= n 0)
      (car items)
      (list-ref (cdr items) (- n 1))))

(list-ref squares 3)
#+END_SRC

#+RESULTS:

Often we cdr down the whole list. To aid in this, scheme includes the primitive procedure null?, which tests whether its argument is the empty list. 

#+BEGIN_SRC scheme
(define (length items)
  (if (null? items)
      0
      (+ 1 (length (cdr items)))))

(define odds (list 1 3 5 7))
(length odds)
#+END_SRC

#+RESULTS:
: 4

We could also compute length in an iterative style

#+BEGIN_SRC scheme
(define (length items)
  (define (iter items count)
    (if (null? items)
        count
        (iter (cdr items) (+ count 1))))
  (iter items 0))

(length odds)
#+END_SRC

#+RESULTS:
: 4

Another conventional programming technique is to cons up an answer list while cdring down a list, as in the procedure append, which takes two lists as arguments and combines their elements to make a new list. 

#+BEGIN_SRC scheme
(append squares odds)
#+END_SRC

#+RESULTS:
| 1 | 4 | 9 | 16 | 25 | 1 | 3 | 5 | 7 |

#+BEGIN_SRC scheme
(append odds squares)
#+END_SRC

#+RESULTS:
| 1 | 3 | 5 | 7 | 1 | 4 | 9 | 16 | 25 |

#+BEGIN_SRC scheme
(define (append l1 l2)
  (if (null? l1)
      l2
      (cons (car l1)
            (append (cdr l1) l2))))

(append odds squares)
#+END_SRC

#+RESULTS:
| 1 | 3 | 5 | 7 | 1 | 4 | 9 | 16 | 25 |

*** Exercise 2.17 

Define a procedure last-pair that returns the list that contains only the last element of a given nonempty list 

(last-pair (list 23 72 149 34))
(34)

#+BEGIN_SRC scheme
(define (last-pair l1)
  (if (null? (cdr l1))
      (car l1)
      (last-pair (cdr l1))))

(last-pair (list 23 72 149 34))
#+END_SRC

#+RESULTS:
: 34

*** Exercise 2.18

Define a procedure reverse that takes a list as an argument and returns a list of the same elements in reverse order 

#+BEGIN_SRC scheme
(define (reverse l1)
  (if (null? (cdr l1))
      (car l1)
      (list (cons (reverse (cdr l1))
             (car l1)))))

(reverse (list 1 4 9 16 25))
#+END_SRC

#+RESULTS:
: ((((((((25 . 16)) . 9)) . 4)) . 1))

*** Exercise 2.20 

The procedures + * and list take arbitrary numbers of arguments. One way to define such a procedure is with dotted-tail-notation. In a procedure definition, a parameter list that has a dot before the last parameter name indicates that, when the procedure is called, the initial parameters will have as values the initial arguments, but the last parameter will be a list of any remaining arguments. 

For instance, given the definition (define (f x y . z) <body>) the procedure f can be called with two or more arguments. 

Use this notation to write a procedure same-parity that takes one or more integers and returns a list of all the arguments that have the same even-odd parity as the first argument. 

#+BEGIN_SRC scheme
(define (same-parity a . b)
  (cond ((null? (cdr b)) (car b))
        ((even? a)
         (if (even? (car b))
             (cons (car b)
                   (same-parity a (cdr b)))
             (same-parity a (cdr b))))
        (else
         (if (even? (car b))
             (same-parity a (cons b
                                  (cddr b)))
             (cons (car b)
                   (same-parity a (cdr b)))))))

(same-parity 1 2 3 4 5 6 7)
#+END_SRC

#+RESULTS:
| (2 3 4 5 6 7) | 4 | 5 | 6 | 7 |

#+BEGIN_SRC scheme
(define (same-parity a . b)
  (if (even? a)
      (cond
       ((null? (car b)) a)
       ((even? (car b))
             (cons (car b)
                   (same-parity a (cdr b))))
       (else (same-parity a (cdr b))))))

(same-parity 1 2 3 4 5)
#+END_SRC

#+RESULTS:
: #!unspecific

Not quite sure why this returns a list. This makes it not get past the first iteration. 

*** Mapping Over Lists 

#+BEGIN_SRC scheme
(define (scale-list items factor)
  (if (null? items)
      '()
      (cons (* (car items) factor)
            (scale-list (cdr items) factor))))

(scale-list (list 1 2 3 4 5) 10)
#+END_SRC

#+RESULTS:
| 10 | 20 | 30 | 40 | 50 |

#+BEGIN_SRC scheme
(define (map proc items)
  (if (null? items)
      '()
      (cons (proc (car items))
            (map proc (cdr items)))))

(map abs (list -10 2.5 -11.6 17))
#+END_SRC

#+RESULTS:
| 10 | 2.5 | 11.6 | 17 |

#+BEGIN_SRC scheme
(map (lambda (x) (* x x))
     (list 1 2 3 4))
#+END_SRC

#+RESULTS:
| 1 | 4 | 9 | 16 |

Now we can give a new definition of scale-list in terms of map 

#+BEGIN_SRC scheme
(define (scale-list items factor)
  (map (lambda (x) (* x factor)) items))

(scale-list (list 1 2 3 4 5) 10)
#+END_SRC

#+RESULTS:
| 10 | 20 | 30 | 40 | 50 |

Scheme standardly provides a map procedure that is more general than the one described here. It takes a procedure of n arguments, together with n lists, and applies the procedure to all the first elements of the lists, all the second elements of the lists, and so on, returning a list of the results. 

#+BEGIN_SRC scheme
(map + (list 1 2 3 4)
     (list 40 50 60)
     (list 700 800 900))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC scheme
(map (lambda (x y) (+ x (* 2 y)))
     (list 1 2 3)
     (list 4 5 6))
#+END_SRC

map is an important construct, not only because it captures a common pattern, but because it establishes a higher level of abstraction in dealing with lists. 

*** Exercise 2.21 

#+BEGIN_SRC scheme
(define (square-list items)
  (if (null? items)
      '()
      (cons (square (car items))
            (square-list (cdr items)))))

(square-list (list 1 2 3 4 5))
#+END_SRC

#+RESULTS:
| 1 | 4 | 9 | 16 | 25 |


#+BEGIN_SRC scheme
(define (square-list items)
  (map square items))

(square-list (list 1 2 3 4 5))
#+END_SRC

#+RESULTS:
| 1 | 4 | 9 | 16 | 25 |

*** Exercise 2.22 

#+BEGIN_SRC scheme
(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons (square (car things))
                    answer))))
  (iter items '()))

(square-list (list 1 2 3 4 5))
#+END_SRC

#+RESULTS:
| 25 | 16 | 9 | 4 | 1 |

The problem with this first version is that it conses on each iteration to the front of the pair. Therefore we get 1 squared first, then 2 sq first, 1 sq second, and so on. 

#+BEGIN_SRC scheme 
(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons answer
                    (square (car things))))))
  (iter items '()))

(square-list (list 1 2 3 4 5))
#+END_SRC

This sort of works in that it gets the correct answer. Unfortunately, it is returning a nested list. This is because answer is always being passed a list, which is then consed into another list, and so on until the end. 

*** Exercise 2.23 

The procedure for-each is similar to map. It takes as arguments a procedure and a list of elements. Rather than forming a list of the results, for-each just applies the procedure to each of the elements in turn, from left to right. The values returned by applying the procedure to the elements are not used at all -- for-each is used with procedures that perform an action, such as printing. 

#+BEGIN_SRC scheme :results output
(define (for-each proc items)
  (if (null? items)
      '#t
      (proc (car items)))
  (for-each proc (cdr items)))

(for-each (lambda (x)
            (newline)
            (display x))
          (list 57 321 88))
#+END_SRC

*** Hierarchical Structures 

The representation of sequences in terms of lists generalizes naturally to represent sequences whose elements may themselves be sequences. Another way to think of sequences whose elements are sequences is as trees. 

#+BEGIN_SRC scheme
(define x (cons (list 1 2)
                (list 3 4)))

(length x)
#+END_SRC

#+RESULTS:
: 3

Recall the recursive plan for computing length:

- length of a list x is 1 plus the length of the cdr of x
- length of the empty list is 0

count-leaves is similar.

- count-leaves of a tree x is count-leaves of the car of x plus count-leaves of the cdr of x
- count-leaves of the empty list is 0 

Then, by taking cars we reach the actual leaves, so we need another base case. 

- count-leaves of a leaf is 1 

#+BEGIN_SRC scheme
(define (count-leaves x)
  (cond ((null? x) 0)
        ((pair? x)
         (+ (count-leaves (car x))
            (count-leaves (cdr x))))
        (else 1)))
#+END_SRC

#+RESULTS:
: count-leaves

#+BEGIN_SRC scheme
(count-leaves x)
#+END_SRC

#+RESULTS:
: 4

#+BEGIN_SRC scheme
(count-leaves (list x x))
#+END_SRC

#+RESULTS:
: 8

*** Exercise 2.24 
*** Exercise 2.25 

#+BEGIN_SRC scheme
(define exlist1 (list 1 3 (list 5 7) 9))
(define exlist2 (list (list 7)))
(define exlist3 (list 1
                      (list 2
                            (list 3
                                  (list 4
                                        (list 5
                                              (list 6 7)))))))
#+END_SRC

#+RESULTS:
: #[constant 59 #x2]

#+BEGIN_SRC scheme
(car (cdaddr exlist1))
(caar exlist2)
(cadadr (cadadr (cadadr exlist3)))
#+END_SRC

#+RESULTS:
: 7

*** Exercise 2.26

#+BEGIN_SRC scheme
(define x (list 1 2 3))
(define y (list 4 5 6))
#+END_SRC

#+RESULTS:
: #[constant 59 #x2]

#+BEGIN_SRC scheme
(append x y)
(cons x y)
(list x y)
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |
| 4 | 5 | 6 |

*** Exercise 2.27 

Modify the reverse procedure from before to produce a deep reverse procedure that takes a list as an argument and returns as its value the list with its elements reversed and with all sublists deep-reversed as well. 

#+BEGIN_SRC scheme
(define (reverse l1)
  (if (null? (cdr l1))
      (car l1)
      (list (reverse (cdr l1))
            (car l1))))

(reverse x)
#+END_SRC

#+RESULTS:
| (3 2) | 1 |

#+BEGIN_SRC scheme
(define x (list (list 1 2)
                (list 3 4)))
#+END_SRC

#+RESULTS:
: x

#+BEGIN_SRC scheme
(define (deep-reverse items)
  (reverse (map reverse items)))
#+END_SRC

#+RESULTS:
: deep-reverse

#+BEGIN_SRC scheme
(deep-reverse x)
#+END_SRC

#+RESULTS:
| 4 | 3 |
| 2 | 1 |

*** Exercise 2.28 

Write a procedure fringe which takes as an argument a tree (represented as a list) and returns a list whose elements are all the leaves of the tree arranged in left to right order 

#+BEGIN_SRC scheme
(define (fringe items)
  (cond ((null? items) '())
        ((not (pair? items))
         (list items))
        (else (append (fringe (car items))
                      (fringe (cdr items))))))
#+END_SRC

#+RESULTS:
: fringe

#+BEGIN_SRC scheme
(fringe x)
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 |

*** Exercise 2.29 

A binary mobile consists of two branches, a left branch and a right branch. Each branch is a rod of a certain length, from which hangs either a weight or another binary mobile. 

We can represent a binary mobile using compound data by constructing it from two branches 

#+BEGIN_SRC scheme
(define (make-mobile left right)
  (list left right))
#+END_SRC

#+RESULTS:
: make-mobile

A branch is constructed from a length (which must be a number) together with a structure, which may be either a number (representing a simple weight) or another mobile. 

#+BEGIN_SRC scheme
(define (make-branch length structure)
  (list length structure))
#+END_SRC

#+RESULTS:
: make-branch

0. For testing, here is a mobile 

#+BEGIN_SRC scheme
(define mobile (make-mobile
                (make-branch 7 8)
                (make-branch 6 (make-mobile
                                (make-branch 5 4)
                                (make-branch 9 10)))))
#+END_SRC

#+RESULTS:

1. Write the corresponding selectors left-branch and right-branch which return the branches of a mobile, and branch-length and branch-structure, which return the components of a branch. 

#+BEGIN_SRC scheme
(define (left-branch mobile)
  (car mobile))

(define (right-branch mobile)
  (cadr mobile))

(define (branch-length branch)
  (car branch))

(define (branch-structure branch)
  (cadr branch))
#+END_SRC

#+BEGIN_SRC scheme
(left-branch mobile)
(right-branch mobile)

(branch-length (left-branch mobile))
(branch-length (right-branch mobile))

(branch-structure (left-branch mobile))
(branch-structure (right-branch mobile))
#+END_SRC

2. Using your selectors, define a procedure total-weight that returns the total weight of a mobile 

#+BEGIN_SRC scheme
(define (total-weight mobile)
  (cond ((null? mobile) 0)
        ((not (pair? mobile)) mobile)
        (else (+ (total-weight (branch-structure (left-branch mobile)))
                 (total-weight (branch-structure (right-branch mobile)))))))
#+END_SRC

#+BEGIN_SRC scheme
(total-weight mobile)
#+END_SRC

3. A mobile is said to be balanced if the torque applied by its top-left branch is equal to that applied by its top-right branch (that is, if the length of the left rod multiplied by the weight hanging from that rod is equal to the corresponding product for the right side) and if each of the submobiles hanging off its branches is balanced. Design a predicate that tests whether a binary mobile is balanced. 


#+BEGIN_SRC scheme
(define balanced-mobile (make-mobile
                         (make-branch 4 6)
                         (make-branch 2 (make-mobile
                                         (make-branch 5 8)
                                         (make-branch 10 4)))))
#+END_SRC

#+BEGIN_SRC scheme
(define (balanced? mobile)
  (cond ((null? mobile) #t)
        ((not (pair? mobile)) #t)
        (else (and (= (* (branch-length (left-branch mobile))
                         (total-weight (branch-structure (left-branch mobile))))
                      (* (branch-length (right-branch mobile))
                         (total-weight (branch-structure (right-branch mobile)))))
                   (balanced? (branch-structure (left-branch mobile)))
                   (balanced? (branch-structure (right-branch mobile)))))))
#+END_SRC

#+BEGIN_SRC scheme
(balanced? balanced-mobile)
#+END_SRC

4. Suppose we change the representatin of mobiles so that the constructors are 

#+BEGIN_SRC scheme
(define (make-mobile left right)
  (cons left right))

(define (make-branch length structure)
  (cons length structure))
#+END_SRC

How much do we need to change our programs to convert to the new representation? 

Our previous representation looked like the following:

;Value 78: ((7 8) (6 ((5 4) (9 10))))

and the new representation looks like this:

;Value 91: ((7 . 8) 6 (5 . 4) 9 . 10)

We need our old selectors to match our new selectors. 

#+BEGIN_SRC scheme
(define (left-branch mobile)
  (car mobile))

(define (right-branch mobile)
  (cdr mobile))

(define (branch-length branch)
  (car branch))

(define (branch-structure branch)
  (cdr branch))
#+END_SRC

After checking all of our previous outputs, it seems to work just fine. 

*** Mapping Over Trees 

Just as map is a powerful abstraction for dealing with sequences, map together with recursion is a powerful abstraction for dealing with trees. 

#+BEGIN_SRC scheme
(define (scale-tree tree factor)
  (cond ((null? tree) '())
        ((not (pair? tree))
         (* tree factor))
        (else (cons (scale-tree (car tree) factor)
                    (scale-tree (cdr tree) factor)))))

(define ex-tree (list 1
                  (list 2
                        (list 3 4)
                        5)
                  (list 6 7)))

(scale-tree ex-tree 10)
#+END_SRC

#+RESULTS:
| 10 | (20 (30 40) 50) | (60 70) |

Another way to implement scale-tree is to regard the tree as a sequence of subtrees and use map. 

#+BEGIN_SRC scheme
(define (scale-tree tree factor)
  (map (lambda (sub-tree)
         (if (pair? sub-tree)
             (scale-tree sub-tree factor)
             (* sub-tree factor)))
       tree))
#+END_SRC

#+RESULTS:
: scale-tree

*** Exercise 2.30 

Define a procedure square-tree analogous to the square-list procedure. 

The original square-list:

#+BEGIN_SRC scheme
(define (square-list items)
  (if (null? items)
      '()
      (cons (square (car items))
            (square-list (cdr items)))))
#+END_SRC

#+BEGIN_SRC scheme
(define (square-tree tree)
  (map (lambda (sub-tree)
         (if (pair? sub-tree)
             (square-tree sub-tree)
             (square sub-tree)))
       tree))

(square-tree ex-tree)
#+END_SRC

*** Exercise 2.31 

Abstract your answer to 2.30 to produce a procedure tree-map with the property that square-tree could be defined as 

#+BEGIN_SRC scheme
(define (square-tree tree)
  (tree-map square tree))
#+END_SRC

#+BEGIN_SRC scheme
(define (tree-map proc tree)
  (map (lambda (sub-tree)
         (if (pair? sub-tree)
             (tree-map proc sub-tree)
             (proc sub-tree)))
       tree))
#+END_SRC

#+BEGIN_SRC scheme
(square-tree ex-tree)
#+END_SRC

*** Exercise 2.32 

Complete the following definition of a procedure to generate a powerset. 

#+BEGIN_SRC scheme
(define (subsets s)
  (if (null? s)
      '()
      (let ((rest (subsets (cdr s))))
        (append rest (map <??> rest)))))
#+END_SRC

(1 2 3)
rest = (2 3)

#+BEGIN_SRC scheme
(define (subsets s)
  (if (null? (cdr s))
      (car s)
      (let ((rest (subsets (cdr s))))
        (append rest (map (lambda (x)
                            (append (car s) x))
                          rest)))))
#+END_SRC

#+BEGIN_SRC scheme
(define s (list 1 2 3))

(subsets s)
#+END_SRC

This doesn't work and needs to be fixed 

** 2.2.3 Sequences as Conventional Interfaces 

In working with compound data, we've stressed how data abstraction permits us to design programs without becoming enmeshed in the details of data representations, and how abstraction preserves for us the flexibility to experiment with alternative representations. In this section, we look at another powerful design principle for working with data structures -- the use of conventional interfaces. 

Consider the following procedure: 

#+BEGIN_SRC scheme
(define (sum-odd-squares tree)
  (cond ((null? tree) 0)
        ((not (pair? tree))
         (if (odd? tree) (square tree) 0))
        (else (+ (sum-odd-squares (car tree))
                 (sum-odd-squares (cdr tree))))))
#+END_SRC

On the surface, this looks different from the following procedure:

#+BEGIN_SRC scheme
(define (even-fibs n)
  (define (next k)
    (if (> k n)
        '()
        (let ((f (fib k)))
          (if (even? f)
              (cons f (next (+ k 1)))
              (next (+ k 1))))))
  (next 0))
#+END_SRC


The first program:

- enumerates the leaves of a tree
- filters them, selects the odd ones
- squares each of the selected ones
- accumulates the results using +, starting with 0 

enumerate -> filter -> map -> accumulate 

The second program:

- enumerates the integers from 0 to n
- computes the Fibonacci number for each integer
- filters them, selecting the even ones
- accumulates the results using cons, starting with '()

enumerate -> map -> filter -> accumulate 
 
If we could organize our programs to make the signla flow structure manifest in the procedures we write, this would increase the conceptual clarity of our code. 

*** Sequence Operations 

The key to organizing programs so as to more clearly reflect the signal-flow structure is to concentrate on the signals that flow from one stage in the process to the next. If we represent these signals as a list, we can use list operations to implement the processing at each of these stages. 

For instance: 

#+BEGIN_SRC scheme
(map square (list 1 2 3 4 5))
#+END_SRC

Filtering a sequence to select only those elements that satisfy a given predicate is accomplished by 

#+BEGIN_SRC scheme
(define (filter predicate sequence)
  (cond ((null? sequence) '())
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))
#+END_SRC

#+RESULTS:
: filter

#+BEGIN_SRC scheme
(filter odd? (list 1 2 3 4 5))
#+END_SRC

Accumulations can be implemented by 

#+BEGIN_SRC scheme
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
#+END_SRC

#+RESULTS:
: accumulate

#+BEGIN_SRC scheme
(accumulate + 0 (list 1 2 3 4 5))
(accumulate * 1 (list 1 2 3 4 5))
(accumulate cons '() (list 1 2 3 4 5))
#+END_SRC


Enumerations can be implemented by the structure:

#+BEGIN_SRC scheme
(define (enumerate-interval low high)
  (if (> low high)
      '()
      (cons low (enumerate-interval (+ low 1) high))))
#+END_SRC

#+RESULTS:
: enumerate-interval

#+BEGIN_SRC scheme
(enumerate-interval 2 7)
#+END_SRC

To enumerate the leaves of a tree we can use 

#+BEGIN_SRC scheme
(define (enumerate-tree tree)
  (cond ((null? tree) '())
        ((not (pair? tree)) (list tree))
        (else (append (enumerate-tree (car tree))
                       (enumerate-tree (cdr tree))))))
#+END_SRC 

#+RESULTS:
: enumerate-tree

#+BEGIN_SRC scheme
(enumerate-tree (list 1 (list 2 (list 3 4)) 5))
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 |

Now we can reformulate sum-odd-squares and even-fibs as in the signal flow diagrams. 

sum-odd-squares 

enumerate -> filter -> map -> accumulate

#+BEGIN_SRC scheme
(define (sum-odd-squares tree)
  (accumulate + 0
              (map square
                   (filter odd?
                           (enumerate-tree tree)))))
#+END_SRC

even-fibs 

enumerate -> map -> filter -> accumulate 

#+BEGIN_SRC scheme
(define (even-fibs n)
  (accumulate cons '()
              (filter even?
                      (map fib
                           (enumerate-interval 1 n)))))
#+END_SRC

The value of expressing programs as sequence operations is that this helps us make program designs that are modular, that is, designs that are constructed by combining relatively independent pieces. We can encourage modular design by providing a library of standard components together with a conventional interface for connecting the components in flexible ways. 

Sequence operations provide a library of standard program elements that we can mix and match. 

#+BEGIN_SRC scheme
(define (list-fib-squares n)
  (accumulate cons '()
              (map square (map fib (enumerate-interval 0 n)))))
#+END_SRC


#+BEGIN_SRC scheme
(list-fib-squares 10)
#+END_SRC

#+RESULTS:
| 0 | 1 | 1 | 4 | 9 | 25 | 64 | 169 | 441 | 1156 | 3025 |

#+BEGIN_SRC scheme
(define (product-of-squares-of-odd-elements sequence)
  (accumulate * 1 (map square (filter odd? sequence))))
#+END_SRC

#+BEGIN_SRC scheme
(product-of-squares-of-odd-elements (list 1 2 3 4 5))
#+END_SRC

#+RESULTS:
: 225

We can also formulate conventional data-processing applications in terms of sequence operations. Suppose we have a sequence of personnel records and we want to find the salary of the highest paid programmer. Assume that we have a selector salary that returns the salary of a record, and a predicate programmer? that tests if a record is for a programmer. Then we can write 

#+BEGIN_SRC scheme
(define (salary-of-highest-paid-programmer records)
  (accumulate max 0 (map salary (filter programmer? records))))
#+END_SRC

Richard Waters found that fully 90% of the code in the Fortran Scientific Subroutine Package fits nicely into the paradigm of map, filter, and accumulate. 

Sequences, implemented here as lists, serve as a conventional interface that permits us to combine processing modules. Additionally, when we uniformly represent structures as sequences, we have localized the data structure dependencies in our programs to a small number of sequence operations. By changing these, we can experiment with alternative representations of sequences, while leaving the overall design of our programs intact. 


*** Exercise 2.33 

Fill in the missing expressions to complete the following definitions of some basic list-manipulation operations as accumulations:

#+BEGIN_SRC scheme
(define (map p sequence)
  (accumulate (lambda (x y)
                (cons (p x) y))
              '()
              sequence))

(map square (list 1 2 3 4 5 6 7 8 9))
#+END_SRC

#+BEGIN_SRC scheme
(define (append seq1 seq2)
  (accumulate cons seq2 seq1))

(append (list 1 2 3 4) (list 5 6 7 8))
#+END_SRC

#+BEGIN_SRC scheme
(define (length sequence)
  (accumulate (lambda (x y) (+ 1 y)) 0 sequence))

(length (list 1 2 3 4 5 6 7 8 9 11 14 88 723472347 2))
#+END_SRC

#+RESULTS:
: 14

*** Exercise 2.34 

Evaluating a polynomial in x at a given value of x can be formulated as an accumulation. We evaluate the polynomial 

$a_nx^n + a_{n-1}x^{n-1} + ... + a_1x + a_0$

using a well known algorithm called Horner's rule, which structures the computation as 

$(...(a_nx + a_{n-1})x + ... + a_1)x + a_0$

In other words, we start with a_n, multiply by x, add a_{n-1}, multiply by x, and so on until we reach a_0. 

Fill in the following template to produce a procedure that evaluates a polynomial using Horner's rule. Assume that the coefficients of the polynomial are arranged in a sequence from a_0 through a_n. 

#+BEGIN_SRC scheme
(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coef higher-terms)
                <???>)
              0
              coefficient-sequence))

(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coef higher-terms)
                (+ (* higher-terms x) this-coef))
              0
              coefficient-sequence))
#+END_SRC

#+BEGIN_SRC scheme
(horner-eval 2 (list 1 3 0 5 0 1))
#+END_SRC

#+RESULTS:
: 79

This one is confusing because accumulate will go through the terms in regular order, which is the reverse order that they present Horner's rule. 

*** Exercise 2.35 

Redefine count-leaves from 2.2.2 as an accumulation 

#+BEGIN_SRC scheme
(define (count-leaves tree)
  (accumulate (lambda (x y) (+ 1 y))
              0
              (map (lambda (x) x)
                   (enumerate-tree tree))))

(define ex-tree2 (list 1 2 3 (list 4 5 (list 6 7))))

(count-leaves ex-tree2)
#+END_SRC

*** Exercise 2.36 

The procedure accumulate-n is similar to accumulate except that it takes as its third argument a sequence of sequences, which are all assumed to have the same number of elements. It applies the designated accumulation procedure to combine all the first elements of the sequences, all the second elements of the sequences, and so on, and returns a sequence of the results. 

For instance, if s is a sequence containing four sequences

((1 2 3)(4 5 6)(7 8 9)(10 11 12))

then the value of (accumulate-n + 0 s) should be the sequence (22 26 30). 

#+BEGIN_SRC scheme
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      '()
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))

(define multi-seq (list (list 1 2 3)
                        (list 4 5 6)
                        (list 7 8 9)
                        (list 10 11 12)))

(accumulate-n + 0 multi-seq)
#+END_SRC

*** Exercise 2.37 

Suppose we represent vectors v = (v_i) as a sequence of numbers and matrices m = (m_{ij}) as sequences of vectors (the rows of the matrix). 

With this representation we can use sequence operations to concisely express the basic matrix and vector operations. 

- (dot-product v w) returns the sum $\sum_i v_i w_i$

- (matrix-*-vector m v) returns the vector t, where $t_i = \sum_k m_{ik}n_{kj}$ 

- (matrix-*-matrix m n) returns the matrix p, where $p_{ij} = \sum_k m_{ik}n_{kj}$

- (transpose m) returns the matrix n where $n_{ij} = m_{ji}$

#+BEGIN_SRC scheme
(define ex-vec1 (list 1 2 3 4))

(define ex-vec2 (list 4 2 3 4))

(define ex-mat1 (list (list 1 2 3 4)
                      (list 4 5 6 6)
                      (list 6 7 8 9)))

(define ex-mat2 (list (list 1 2 3 5)
                      (list 4 9 6 6)
                      (list 6 7 11 9)))
#+END_SRC

#+BEGIN_SRC scheme
(define (dot-product v w)
  (accumulate + 0 (map * v w)))

(dot-product ex-vec1 ex-vec2)
#+END_SRC

#+BEGIN_SRC scheme
(define (matrix-*-vector m v)
  (map <???> m))
#+END_SRC

#+BEGIN_SRC scheme
(define (transpose mat)
  (accumulate-n <???> <???> mat))
#+END_SRC


#+BEGIN_SRC scheme
(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map <???> m)))
#+END_SRC
