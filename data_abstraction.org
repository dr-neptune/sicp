* Data Abstraction
:PROPERTIES:
:header-args: :session scheme :results value
:END:

Data abstraction is a methodology that enables us to isolate how a compound data object is used from the details of how it is constructed from more primitive data objects.

We wish to structure our programs such that they use compound data objects that operate on "abstract data". Programs should use data in such a way as to make -no- assumptions about the data that is not strictly necessary for performing the task at hand. 

** Arithmetic Operations for Rational Numbers

Lets assume that we already have a way of constructing a rational number from a numerator and denominator. We also assume that we have a way of extracting the numerator and denominator from a rational number. 

- (make-rat <n><d>) returns a rational number 
- (numer <x>) returns numerator
- (denom <x>) returns denominator 


#+DOWNLOADED: /tmp/screenshot.png @ 2020-02-16 09:16:29
[[file:Data Abstraction/screenshot_2020-02-16_09-16-29.png]]

#+BEGIN_SRC scheme
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))


(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
#+END_SRC

#+RESULTS:
: #[constant 40 #x2]

*** Pairs

#+BEGIN_SRC scheme
(define x (cons 1 2))

(car x)
(cdr x)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC scheme
(define y (cons 3 4))
(define z (cons x y))

(car (car z))
(car (cdr z))
#+END_SRC

#+RESULTS:

Data objects constructed from pairs are called list-structured data. 

*** Representing Rational Numbers

Pairs offer a natural way to complete the rational number system. Represent a rational number as a pair of two integers.

#+BEGIN_SRC scheme
(define (make-rat x y)
  (cons x y))
(define (numer x) (car x))
(define (denom x) (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display '"/")
  (display (denom x)))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC scheme
(define one-half (make-rat 1 2))
(print-rat one-half)
#+END_SRC


#+BEGIN_SRC scheme
(define one-third (make-rat 1 3))
(print-rat one-third)
#+END_SRC

#+BEGIN_SRC scheme
(print-rat (add-rat one-half one-third))
#+END_SRC

#+BEGIN_SRC scheme
(print-rat (mul-rat one-half one-third))
#+END_SRC

#+BEGIN_SRC scheme
(print-rat (add-rat one-third one-third))
#+END_SRC

As this last example shows, our implementation doesn't simplify. We can remedy this by changing make-rat. 

#+BEGIN_SRC scheme
(define (make-rat n d)
  (let ((g (gcd n d)))
    (cons (/ n g) (/ d g))))
#+END_SRC

*** Exercise 2.1 

Define a better version of make-rat that handles both positive and negative arguments. 

#+BEGIN_SRC scheme
(define (abs x)
  (if (< x 0) (- x) x))

(define (make-rat n d)
  (define (sign x)
    (if (< x 0) - +))
  (let ((g (gcd n d)))
    (cons ((sign d) (/ n g)) (abs (/ d g)))))
#+END_SRC

#+BEGIN_SRC scheme :results output
(print-rat (make-rat -2 -3))
#+END_SRC

#+RESULTS:
: 
: 2/3

#+BEGIN_SRC scheme
(abs -4)
#+END_SRC

#+RESULTS:
: 4

*** Abstraction Barriers 


#+DOWNLOADED: /tmp/screenshot.png @ 2020-02-17 17:08:00
[[file:Data Abstraction/screenshot_2020-02-17_17-08-00.png]]

In general, the underlying idea of data abstraction is to identify for each type of data object a basic set of operations in terms of which all manipulations of data objects of that type will be expressed, and then use only those operations in manipulating the data. 

In effect, procedures at each level are the interfaces that define the asbtraction barriers and connect the different levels. 

*** Exercise 2.2 

segments as pairs of points (make-segment, start/end-segment, midpoint)
------------------
points as pairs (x-point, y-point, make-point)
------------------
how points are implemented (cons, car, cdr)

#+BEGIN_SRC scheme
(define (make-segment a b)
  (cons a b))

(define (start-segment s)
  (car s))

(define (end-segment s)
  (cdr s))

(define (make-point x y)
  (cons x y))

(define (x-point p)
  (car p))

(define (y-point p)
  (cdr p))

(define (midpoint-segment s)
  (make-point (/ (+ (x-point (start-segment s))
                    (x-point (end-segment s)))
                 2.0)
              (/ (+ (y-point (start-segment s))
                    (y-point (end-segment s)))
                 2.0)))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ", ")
  (display (y-point p))
  (display ")"))
#+END_SRC

#+RESULTS:
: print-point

#+BEGIN_SRC scheme :results output
(print-point (make-point 2 3))
#+END_SRC

#+RESULTS:
: 
: (2, 3)

#+BEGIN_SRC scheme :results output
(make-segment (make-point 4 5) (make-point 4 5))
#+END_SRC

#+BEGIN_SRC scheme :results output
(print-point
 (midpoint-segment
  (make-segment
   (make-point 0.5 1)
   (make-point 4 5.2))))
#+END_SRC

*** Exercise 2.3 

rectangles as pairs of segments (make-rectangle top-left bottom-right area perimeter)
------------------
segments as pairs of points (make-segment, start/end-segment, midpoint)
------------------
points as pairs (x-point, y-point, make-point)
------------------
how points are implemented (cons, car, cdr)


#+BEGIN_SRC scheme
(define (make-rectangle top-left bottom-right)
  (let ((bottom-left (make-point (x-point top-left) 
                                 (y-point bottom-right)))
        (top-right (make-point (x-point bottom-right)
                               (y-point top-left))))
    (cons bottom-left
          (cons top-left
                (cons top-right bottom-right)))))
  
(define (bottom-left r)
  (car r))

(define (top-left r)
  (car (cdr r)))

(define (top-right r)
  (car (cdr (cdr r))))

(define (bottom-right r)
  (cdr (cdr (cdr r))))

(define (rect-area r)
  (* (abs (- (x-point (top-left r))
             (x-point (bottom-right r))))
     (abs (- (y-point (top-left r))
             (y-point (bottom-right r))))))


(define (rect-perimeter r)
  (+ (* 2 (abs (- (x-point (top-left r))
                  (x-point (bottom-right r)))))
     (* 2 (abs (- (y-point (top-left r))
                  (y-point (bottom-right r)))))))
#+END_SRC

#+BEGIN_SRC scheme :results output
(print-point (make-rectangle (make-point 2 3) (make-point 5 1)))
#+END_SRC

#+RESULTS:
: 
: ((2 . 1), ((2 . 3) (5 . 3) 5 . 1))

bottom-left (2, 1)
top-left (2, 3)
top-right (5, 3)
bottom-right (5, 1)

#+BEGIN_SRC scheme :results output
;; bottom left
(print-point
 (bottom-left
  (make-rectangle (make-point 2 3)
                  (make-point 5 1))))
#+END_SRC

#+RESULTS:
: 
: (2, 1)

#+BEGIN_SRC scheme :results output
;; top left
(print-point
 (top-left
  (make-rectangle (make-point 2 3)
                  (make-point 5 1))))
#+END_SRC

#+RESULTS:
: 
: (2, 3)

#+BEGIN_SRC scheme :results output
;; top-right 
(print-point
 (top-right
  (make-rectangle (make-point 2 3)
                  (make-point 5 1))))
#+END_SRC

#+RESULTS:
: 
: (5, 3)

#+BEGIN_SRC scheme :results output
;; bottom right
(print-point
 (bottom-right
  (make-rectangle (make-point 2 3)
                  (make-point 5 1))))
#+END_SRC

#+RESULTS:
: 
: (5, 1)

#+BEGIN_SRC scheme
(rect-area
 (make-rectangle (make-point 2 3)
                 (make-point 5 1)))
#+END_SRC

#+RESULTS:
: 6

#+BEGIN_SRC scheme
(rect-perimeter
 (make-rectangle (make-point 2 3)
                 (make-point 5 1)))
#+END_SRC

#+RESULTS:
: 10

*** What is meant by data?

In general, we can think of data as defined by some collection of selectors and constructors, together with specified conditions that these procedures must fulfill in order to be a valid representation. 

#+BEGIN_SRC scheme
(define (cons x y)
  (define (dispatch m)
    (cond ((= m 0) x)
          ((= m 1) y)
          (else (error "Argument not 0 or 1: CONS" m))))
  dispatch)

(define (car z) (z 0))
(define (cdr z) (z 1))
#+END_SRC

#+RESULTS:
: cdr

#+BEGIN_SRC scheme
(cdr (cons 1 2))
#+END_SRC

#+RESULTS:
: 2

This example demonstrates that the ability to manipulate procedures as objects automatically provides the ability to represent compound data. This style of programming is often called message passing.

*** Exercise 2.4 

#+BEGIN_SRC scheme
(define (cons x y)
  (lambda (m) (m x y)))

(define (car z)
  (z (lambda (p q) p)))

(define (cdr z)
  (z (lambda (p q) q)))
#+END_SRC

#+RESULTS:
: cdr

#+BEGIN_SRC scheme
(car (cons 5 6))
(cdr (cons 5 6))
#+END_SRC

#+RESULTS:
: 6

#+BEGIN_SRC scheme
;;(car (cons 5 6))
((cons 5 6) (lambda (p q) p))
((lambda (m) (m 5 6)) (lambda (p q) p))
((lambda ((lambda (p q) p)) ((lambda (p q) p) 5 6)))
((lambda ((lambda (p q) p)) ((lambda (5 6) 5) 5 6)))
((lambda ((lambda (p q) p)) 5))
#+END_SRC

*** Exercise 2.5 

I'm not sure I understand the question entirely. It seems to me that every non negative integer can not be represented as 2^a3^b. Consider 5, or 10. 

#+BEGIN_SRC scheme
(define (largest-power a i)
  (if (= (remainder i a) 0)
      (+ 1 (largest-power a (/ i a)))
      0))

(define (car i)
  (largest-power 2 i))

(define (cdr i)
  (largest-power 3 i))
#+END_SRC

#+RESULTS:
: #[constant 40 #x2]

#+BEGIN_SRC scheme
(largest-power 2 64)
#+END_SRC

#+RESULTS:
: 6

#+BEGIN_SRC scheme
(largest-power 3 36)
#+END_SRC

#+RESULTS:
: 2

*** Exercise 2.6 

#+BEGIN_SRC scheme
(define zero (lambda (f)
               (lambda (x) x)))

(define (add-1 n)
  (lambda (f)
    (lambda (x)
      (f ((n f) x)))))
#+END_SRC

Define one and two directly. 

one 

#+BEGIN_SRC scheme
(add-1 zero)

(lambda (f)
  (lambda (x)
    (f ((zero f) x))))

(lambda (f)
  (lambda (x)
    (f (((lambda (f)
           (lambda (x) x)) f) x))))

; zero is the function that returns its arg given a function f
(lambda (f)
  (lambda (x)
    (f x)))
#+END_SRC

two 

#+BEGIN_SRC scheme
(add-1 one)

(add-1 (lambda (f)
         (lambda (x)
           (f x))))

(lambda (f)
  (lambda (x)
    (f (((lambda (f)
           (lambda (x)
             (f x))) f) x))))

(lambda (f)
  (lambda (x)
    (f (f x))))
#+END_SRC

Essentially, we are nested our functions in tandem with the number.

So n would look like

#+BEGIN_SRC scheme
(lambda (f)
  (lambda (x)
    (f ( f ( f ( ...(n-5 times)... (f (f x))))))))
#+END_SRC


