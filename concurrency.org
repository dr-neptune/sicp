* Concurrency: Time is of the Essence 
:PROPERTIES:
:header-args: :session scheme :results verbatim raw
:END:

The central issue lurking beneath the complexity of state, sameness, and change is that by introducing assignment we are forced to admit time into our computational models. 

** The Nature of Time in Concurrent Systems 
   
#+BEGIN_SRC scheme
(define (withdraw amount)
  (if (>= balance amount)
      (begin
        (set! balance
              (- balance amount))
        balance)
      "Insufficient Funds"))
#+END_SRC

#+RESULTS:

** Correct Behavior of Concurrent Programs 

To make concurrent programs behave correctly, we may have to place some restrictions on concurrent execution. 

*** Exercise 3.38 

Suppose that Peter, Paul and Mary share a joint bank account with $100 and they execute the following: 

#+BEGIN_SRC scheme
Peter: (set! balance (+ balance 10))
Paul:  (set! balance (- balance 20))
Mary:  (set! balance (- balance (/ balance 2)))
#+END_SRC

1. List all the different possible values for balance after these 3 transactions have bee completed

let P be Peter, L be Paul, M be Mary. Then we have 3! possible orderings:

PLM : 100 110 90 45 
PML : 100 110 55 35
LPM : 100 80  90 45
LMP : 100 80  40 50
MLP : 100 50  30 40
MPL : 100 50  60 40

2. What are some other values that could be produced if the system allows the processes to be interleaved?

This adds a whole other layer of complexity to the system. Each of the time steps has multiple possible intermediate steps which could present mismatches between the actual balance in the bank and the current state of the balance in the bank being presented to the user. This would in turn also skew the operations effects as well. 

** Mechanisms for Controlling Concurrency 

Many mechanisms have been designed for the purpose of constraining the interleaving of concurrent processes that we can be sure program behavior is correct. We describe the serializing here. 

*Serialization* implements the following idea: Processes will execute concurrently, but there will be collections of procedures that cannot be executed concurrently. Serialization creates distinguished sets of procedures such that only one executin of a procedure in each serialized set is permitted to happen at a time. 


*Serializers in Scheme* 

#+BEGIN_SRC scheme
(parallel-execute <p1> ... <pn>)

(define x 10)
(parallel-execute (lambda () (set! x (* x x)))
                  (lambda () (set! x (+ x 1))))
#+END_SRC

We can constrain the concurrency by using serialized procedures, which are created by serializers.

#+BEGIN_SRC scheme
(define x 10)
(define s (make-serializer))
(parallel-execute
 (s (lambda () (set! x (* x x))))
 (s (lambda () (set! x (+ x 1)))))
#+END_SRC

#+BEGIN_SRC scheme
(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance
                     (- balance amount))
               balance)
        "Insufficient Funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((protected (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw)
             (protected withdraw))
            ((eq? m 'deposit)
             (protected deposit))
            ((eq? m 'balance)
             balance)
            (else (error "Unknown Request: MAKE-ACCOUNT" m))))
    dispatch))
#+END_SRC

*** Exercise 3.39 

Which of the five possibilities in the parallel execution shown above remain if we instead serialize execution as follows?

#+BEGIN_SRC scheme
(define x 10)
(define s (make-serializer))
(parallel-execute
 (lambda () (set! x ((s (lambda () (* x x))))))
 (s (lambda () (set! x (+ x 1)))))
#+END_SRC

if p1 goes first and serializes it, we end up with 100 and then 1, so 101 
if p2 goes first and serializes it, we end up with 11, and then 11^2, so 121 

*** Exercise 3.40 

Give all the possible values of x that can result from executing

#+BEGIN_SRC scheme
(define x 10)
(parallel-execute
 (lambda () (set! x (* x x)))
 (lambda () (set! x (* x x x))))
#+END_SRC

There is no serialization here, so we have 1 value with two timesteps and the interleave for which it could be either or. So we get 2*2*2 = 8 possible outcomes
100, 1000, 100^3, 1000^2

let the first lamba be p1 and the second be p2 and access be a1 a2 respectively
then we have the procedures 
a1 p1 100
a2 p2 1000
a1 p1 a2 p2 100^3
a1 p2 a2 p1 1000^2
a2 p1 a1 p2 100^3
a2 p2 a1 p2 1000^2

Which of these possibilities remain if we instead use serialized procedures? 

#+BEGIN_SRC scheme
(define x 10)
(define s (make-serializer))
(parallel-execute
 (s (lambda () (set! x (* x x))))
 (s (lambda () (set! x (* x x x)))))
#+END_SRC

a1 p1 a2 p2 10 100 100 100^3

*** Exercise 3.41

Ben Bitdiddle worries that it would be better to implement the bank account as follows:

#+BEGIN_SRC scheme
(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin
          (set! balance
                (- balance amount))
          balance)
        "Insufficient Funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((protected (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw)
             (protected withdraw))
            ((eq? m 'deposit)
             (protected deposit))
            ((eq? m 'balance)
             ((protected
               (lambda () balance))))
            (else
             (error "Unknown Request: MAKE-ACCOUNT" m))))
    dispatch))
#+END_SRC

because allowing unserialized access to the bank balance can result in anomalous behavior. 

Do you agree? Is there any scenario that demonstrates Ben's concern? 

I disagree. If we serialize both withdraw and deposit, there won't be a chance for the wrong balance to be pulled from the account as it will be "frozen" for the duration of the operation.

*** Exercise 3.42 

Ben Bitdiddle suggests that make-account could be changed so that the calls to protected are done outside the dispatch procedure. Then an account would return the same serialized procedure (which was created at the same time as the account) each time it is asked for a withdrawl procedure. 

#+BEGIN_SRC scheme
(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient Funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((protected-withdraw (protected withdraw))
        (protected-deposit (protected deposit)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw) protected-withdraw)
            ((eq? m 'deposit) protected-deposit)
            ((eq? m 'balance) balance)
            (else (error "Unknown Request: MAKE-ACCOUNT" m))))
    dispatch))
#+END_SRC

Is this a safe change to make? Is there any difference in what concurrency is allowed by these two versions of make-account? 

Suppose that protected returns a newly made serializer group. Then:

No, this *is not* a safe change to make. When Ben creates two different protected values, one for each of withdraw and deposit, he is creating two separate sets of operations that are contained together. This essentially makes both of them end up being unserialized, since neither share the serialization state with each other. 

Alternatively, if protected simple adds an operation to a serializer group, then this *is* a safe change to make and it is equivalent to the original version given in the book (though slightly more verbose).

** Complexity of Using Multiple Shared Resources 

While using serializers is relatively straight forward when there is only a single shared resource (like a single bank account), concurrent programming can be treacherously difficult when there are multiple shared resources.

Suppose we wish to swap the balances in two bank accounts:

#+BEGIN_SRC scheme
(define (exchange acc1 acc2)
  (let ((difference (- (acc1 'balance)
                       (acc2 'balance))))
    ((acc1 'withdraw) difference)
    ((acc2 'deposit) difference)))
#+END_SRC

For correct behavior, we must arrange for the exchange procedure to lock out any other concurrent accesses to the accounts during the entire time of the exchange. 

One way we can accomplish this is by using both account's serializers to serialize the entire exchange procedure. We can do this by arranging for access to an account' serializer. This is deliberately breaking the modularity of the bank account object by exposing the serializer.  

#+BEGIN_SRC scheme
(define (make-account-and-serializer balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient Funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((balance-serializer (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
            ((eq? m 'deposit) deposit)
            ((eq? m 'balance) balance)
            ((eq? m 'serializer) balance-serializer)
            (else (error "Unknown Request: MAKE-ACCOUNT" m))))
    dispatch))
#+END_SRC

Unlike our earlier serialized account, it is now the responsibility of each user of bank-account objects to explicitly manage the serialization

#+BEGIN_SRC scheme
(define (deposit account amount)
  (let ((s (account 'serializer))
        (d (account 'deposit)))
    ((s d) amount)))
#+END_SRC

With this exported serializer technique, we can implement a serialized exchange program.

#+BEGIN_SRC scheme
(define (serialized-exchange acc1 acc2)
  (let ((ser1 (acc1 'serializer))
        (ser2 (acc2 'serializer)))
    ((ser1 (ser2 exchange))
     acc1 acc2)))
#+END_SRC

*** Exercise 3.43 

Suppose that the balances in three accounts start out at $10, $20, $30 and that multiple processes run, exchanging the balances in the accounts. Argue that if the processes are run sequentially, after any number of concurrent exchanges, the account balances will be the same in some order.

Suppose we have three accounts, a1, a2, and a3. Then we have essentially 3 slots for them to exist in, and 3! permutations for them. If they are serialized, then these happen sequentially and there is not a problem. 

Suppose they were not serialized. Then for each interwoven point, we would have discrepancies with the read option leading to an explosion of possible errors and bugs. 

*** Exercise 3.44

Consider the problem of transferring an amount from one account to another. 

#+BEGIN_SRC scheme
(define (transfer from to amount)
  ((from 'withdraw) amount)
  ((to 'deposit) amount))
#+END_SRC

Ben Bitdiddle claims this can be accomplished with the procedure above even with multiple people concurrently transferring money among multiple accounts if we have serialized deposit and withdrawl transactions.

Louis Reasoner claims there is a problem here and that we need to use a transfer method at least as sophisticated as the exchange problem used (in which we serialized the accounts explicitly and then serialized the operation).

When we withdraw from an account that is serialized, we don't need the other account to be available as well. Similarly, when we deposit to an account, we don't need the other account to be available. When we exchange the balances however, we do. In this case, we don't need the more complex method as the operations withdraw and deposit are independent.

*** Exercise 3.45 

** Implementing Serializers 

We implement serializers in terms of the more primitive synchronization mechanism called a mutex. 

A mutex supports two operations: the mutex can be acquired, an dthe mutex can be released. Once a mutex has been acquired, not other acquire operations on that mutex may proceed until the mutex is released. 

#+BEGIN_SRC scheme
(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex 'acquire)
        (let ((val (apply p args)))
          (mutex 'release)
          val))
      serialized-p)))
#+END_SRC

The mutex is a mutable object that can hold the value true or false. If true, the mutex is unavailable, and any process that attempts to acquire the mutex must wait.

#+BEGIN_SRC scheme
(define (make-mutex)
  (let ((cell (list false)))
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire)))
            ((eq? m 'release)
             (clear! cell))))
    the-mutex))

(define (clear! cell)
  (set-car! cell false))

(define (test-and-set! cell)
  (if (car cell)
      true
      (begin (set-car! cell true)
             false)))
#+END_SRC

This implementation of test-and-set! doesn't suffice because we have not ensured that the operation performs atomically. We must guarantee that once a process has tested a cell and found it to be false, the contents will be set to true before any other process can test the cell. 

*** Exercise 3.46 

Suppose we ping the process test-and-set! for a cell and the cell is at that moment set to false. Then at the same time, another process pings the mutex and sees that the process is set to false as well. Then, they both acquire the mutex, which is then set to TRUE and these two operations are no longer mutually exclusive. 

*** Exercise 3.47 

A semaphore of size n is a generalization of a mutex. It supports acquire and release operations, but it is more general in that up to n processes can acquire it concurrently. 

Give implementations of semaphores: 

1. In terms of mutexes 

make a mutex, but instead of a true false value, we have a counter up to n and for each of these values spin up a mutex 

#+BEGIN_SRC scheme
(define (make-semaphore n)
  (let ((cell 0)
        (mutex (make-mutex)))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (if (< cell n)
                 (begin (mutex 'acquire)
                        (set! cell (+ cell 1)))))
            ((eq? m 'release)
             (if (> cell 0)
                 (begin (mutex 'release)
                        (set! cell (- cell 1)))
                 (error "No Cells Found! -- MAKE-SEMAPHORE")))
            (else (error "Unknown Operation -- MAKE-SEMAPHORE" m))))
    the-semaphore))
#+END_SRC

** Deadlock

There is still a problem with our account exchanging procedure, even if we use a serializer. 

Peter attempts to swap a1 and a2. Paul concurrently attempts to swap a2 and a1. Peters serialized procedure protects a1, and then Pauls serialized procedure protects a2. Now Peter cannot proceed until a2 is unprotected, and Paul cannot proceed until a1 is unprotected. Each is stalled forever, waiting for the other. This situation is called deadlock. 

One way to avoid this is to give each account a unique id number and rewrite serialized-exchange so that a process will always attempt to enter a procedure protecting the lowest number first. 

*** Exercise 3.48 

Explain in detail why the deadlock avoidance method above avoids deadlock in the exchange problem. 

Rewrite serialized-exchange to incorporate this idea. 


