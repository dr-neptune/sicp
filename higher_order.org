* Formulating Abstractions with Higher Order Procedures
  :PROPERTIES:
  :header-args: :session scheme :results verbatim raw
  :END:
  
We will be severely limited in our ability to create abstractions if we are restricted to procedures whose parameters must be numbers. Often the same process will be used with a number of different procedures. To express such patterns as concepts, we will need to construct procedures that can accept procedures as arguments or return procedures as values.

Procedures that manipulate procedures are called higher-order procedures.


** 1.3.1 | Procedures as Arguments

 Compute the sum of the integers from a through b

 #+BEGIN_SRC scheme
(define (sum-integers a b)
  (if (> a b)
      0
      (+ a (sum-integers (+ a 1) b))))

(sum-integers 5 50)
 #+END_SRC

 #+RESULTS:
 1265

 Compute the sum of the cubes of the integers in the given range

 #+BEGIN_SRC scheme
(define (cube x)
  (* x x x))

(define (sum-cubes a b)
  (if (> a b)
      0
      (+ (cube a)
         (sum-cubes (+ a 1) b))))

(sum-cubes 5 50)
 #+END_SRC

 #+RESULTS:
 1625525
 1625525

 Compute the sum of a sequence of terms in the series

 1 / 1*3 + 1 / 5*7 + 1 / 9 * 11 + ...

 which converges to pi / 8 slowly

 #+BEGIN_SRC scheme
(define (pi-sum a b)
  (if (> a b)
      0
      (+ (/ 1.0 (* a (+ a 2)))
         (pi-sum (+ a 4) b))))

(pi-sum 1 50)
 #+END_SRC

 #+RESULTS:
 .3878931641107514


 We could generate each of the procedures by filling in slots in the same template:

 #+BEGIN_SRC scheme
(define (<name> a b)
  (if (> a b)
      0
      (+ (<term> a)
         (<name> (<next> a) b))))
 #+END_SRC

 Mathematicians long ago identified the abstraction of summation of a series and invented sigma notation

 $\sum_{n = a}^b f(n) = f(a) + ... + f(b)$

 to express this concept. This allows us to formulate general results about sums that are independent of the particular series being summed.

 Similarly we wish to make procedures that deal with the concept itself rather than any specific sum. We do this by transforming the slots into formal parameters.

 #+BEGIN_SRC scheme
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))
 #+END_SRC

 #+RESULTS:
 sum

 We can use sum just as we would any other procedure.

 For example, to define sum-cubes

 #+BEGIN_SRC scheme
(define (inc n) (+ n 1))

(define (sum-cubes a b)
  (sum cube a inc b))

(sum-cubes 1 10)
 #+END_SRC

 With the aid of an identity procedure to compute the term, we can define sum-integers in terms of sum

 #+BEGIN_SRC scheme
(define (identity x)
  x)

(define (sum-integers a b)
  (sum identity a inc b))

(sum-integers 1 10)
 #+END_SRC

 #+RESULTS:
 55
 55

 and pi-sum

 #+BEGIN_SRC scheme
(define (pi-sum a b)
  (define (pi-term x)
    (/ 1.0 (* x (+ x 2))))
  (define (pi-next x)
    (+ x 4))
  (sum pi-term a pi-next b))

(* 8 (pi-sum 1 1000))
 #+END_SRC

 #+RESULTS:
 3.139592655589783

 Once we have sum, we can use it as a building block in formulating further concepts.

 For example, the definite integral of a function between the limits a and b can be approximated numerically using the formula

 $\int_a^b f = [f(a + \frac{dx}{2}) + 
                f(a + dx + \frac{dx}{2}) + 
                f(a + 2dx + \frac{dx}{2}) + ...]dx$

 for small values of dx. 

 We can express this directly as a procedure:

 #+BEGIN_SRC scheme
(define (integral f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b)
     dx))

(integral cube 0 1 0.001)
 #+END_SRC

 #+RESULTS:
 .249999875000001

 The exact value of the integral of cube between 0 and 1 is 1/4. 

*** Exercise 1.29

Simpson's Rule is a more accurate method of numerical integration than the method illustrated above. 

$\int_a^b f = \frac{h}{3}(y_0 + 4y_1 + 2y_2 + 4y_3 + 2y_4 + ... + 2y_{n-2} + 4y_{n-1} + y_n)$

where $h = \frac{(b - a)}{n}$ for some even integer n, and
$y_k = f(a + kh)$/ 

#+BEGIN_SRC scheme
(define (even? n)
  (= (remainder n 2) 0))

(define (inc x)
  (+ x 1))

(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))
#+END_SRC

#+RESULTS:
#[constant 42 #x2]

#+BEGIN_SRC scheme
(define (simpson-int f a b n)
  (define h (/ (- b a) n))
  (define (y k) (f (+ a (* k h))))
  (define (k-cond k)
    (* (cond ((or (= k 0) (= k n)) 1)
             ((even? k) 2)
             (else 4))
       (y k)))
  
  (* (sum k-cond a inc n)
     (/ h 3)))
#+END_SRC

#+RESULTS:
simpson-int

#+BEGIN_SRC scheme
(simpson-int cube 0 1 1000)
#+END_SRC

#+RESULTS:
1/4

*** Exercise 1.30

The sum procedure above generates a linear recursion. The procedure can be rewritten so that the sum is performed iteratively. 

#+BEGIN_SRC scheme
(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
        0
        (+ (term result) (iter (next a) result)))))
#+END_SRC

#+RESULTS:
sum

#+BEGIN_SRC scheme
(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ result (term a)))))
  (iter a 0))
#+END_SRC

#+RESULTS:
sum

#+BEGIN_SRC scheme
(sum identity 0 inc 5)
#+END_SRC

*** Exercise 1.31 

The sum procedure is only the simplest of a number of similar abstractions that can be captured as higher order procedures. Write an analogous procedure called product that returns the product of the values of a function at points over a given range.

#+BEGIN_SRC scheme
(define (product term a next b)
  (if (> a b)
      1
      (* (term a)
         (product term (next a) next b))))
#+END_SRC

#+RESULTS:
product

#+BEGIN_SRC scheme
(define (cube x) (* x x x))

(product cube 1 inc 3)
#+END_SRC

#+RESULTS:
216

Show how to define factorial in terms of product

#+BEGIN_SRC scheme
(define (identity x) x)
#+END_SRC

#+RESULTS:
identity

#+BEGIN_SRC scheme
(define (factorial n)
  (product identity 1 inc n))
#+END_SRC

#+RESULTS:
factorial

#+BEGIN_SRC scheme
(factorial 5)
#+END_SRC

Also use product to compute approximations to pi using the formula

$\frac{\pi}{4} = \frac{2*4*4*6*6*8*...}{3*3*5*5*7*7*...}$

#+BEGIN_SRC scheme
(define (counter x)
  (if (even? x) (/ (+ x 2)
                   (+ x 1))
      (/ (+ x 1)
         (+ x 2))))
#+END_SRC

#+RESULTS:
counter

#+BEGIN_SRC scheme
(* 4.0 (product counter 1 inc 1000))
#+END_SRC

#+RESULTS:
3.1431607055322663

#+BEGIN_SRC scheme
(define (product-iter term a next b)
  (define (iter a prod)
    (if (> a b)
        prod
        (iter (next a) (* a prod))))
  (iter a 1))


#+END_SRC

#+BEGIN_SRC scheme
(product-iter identity 1 inc 5)
#+END_SRC

*** Exercise 1.32 

Show that sum and product are both special cases of a still more general notion called accumulate that combines a collection of terms, using some general accumulation function

#+BEGIN_SRC scheme
(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
                (accumulate combiner null-value term (next a) next b))))
#+END_SRC

#+RESULTS:
accumulate

#+BEGIN_SRC scheme
(accumulate * 1 identity 1 inc 5)
#+END_SRC

#+RESULTS:
120

#+BEGIN_SRC scheme
(define (sum term a next b)
  (accumulate + 0 term a next b))

(sum identity 1 inc 5)
#+END_SRC

#+RESULTS:
15

#+BEGIN_SRC scheme
(define (product term a next b)
  (accumulate * 1 term a next b))

(product identity 1 inc 5)
#+END_SRC

#+RESULTS:
120

#+BEGIN_SRC scheme
(define (accumulate-iter combiner null-value term a next b)
  (define (iter a value)
    (if (> a b)
        (combiner value null-value)
        (iter (next a) (combiner value (term a)))))
  (iter a null-value))
#+END_SRC

#+RESULTS:
accumulate-iter


#+BEGIN_SRC scheme
(accumulate-iter + 0 identity 1 inc 5)
#+END_SRC

#+RESULTS:
15
120
 
*** Exercise 1.33

You can obtain an even more general version of accumulate by introducing the notion of a filter on the terms to be combined -- that is, combine only those terms derived from values in the range that satisfy a specified condition.

#+BEGIN_SRC scheme
(define (filtered-accumulate predicate combiner null-value term a next b)
  (if (predicate a)
      (if (> a b)
          null-value
          (combiner (term a)
                    (filtered-accumulate predicate combiner null-value
                                         term (next a) next b)))
      (filtered-accumulate predicate combiner null-value term (next a) next b)))
#+END_SRC

#+BEGIN_SRC scheme
(filtered-accumulate even? + 0 identity 1 inc 5)
#+END_SRC

Show how to express the following using filtered-accumulate:

1. the sum of the squares of the prime numbers in the interval a to b

#+BEGIN_SRC scheme
(define (prime? n)
  (fast-prime? n 100))
#+END_SRC

#+BEGIN_SRC scheme
(define (ssprime a b)
  (filtered-accumulate prime? + 0 square a inc b))
#+END_SRC

#+RESULTS:
ssprime

#+BEGIN_SRC scheme
(ssprime 2 6)
#+END_SRC

2. The product of all the positive integers less than n that are relatively prime to n (i.e. all positive integers i < n such that GCD(i, n) = 1)

#+BEGIN_SRC scheme
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
#+END_SRC

#+RESULTS:
gcd


#+BEGIN_SRC scheme
(define (coprime a n)
  (if (= (gcd a n) 1)
      true
      false))
#+END_SRC

#+RESULTS:
coprime

#+BEGIN_SRC scheme
(coprime 9 21)
#+END_SRC

#+RESULTS:
#f

#+BEGIN_SRC scheme
(define (prod-rprime n)
  (define (coprime a)
    (if (= (gcd a n) 1)
        true
        false))
  (filtered-accumulate coprime * 1 identity 2 inc n))
#+END_SRC

#+BEGIN_SRC scheme
(prod-rprime 10)
#+END_SRC

#+RESULTS:
189

10 has divisors 2 and 5
2 has 2
3 no
4 has 2
5 has 5
6 has 2
7 no
8 has 2 
9 no

#+BEGIN_SRC scheme
(* 3 7 9)
#+END_SRC

#+RESULTS:
189

** 1.3.2 | Constructing Procedures Using Lambda

In general, lambda is used to create procedures in the same way as define, except that no name is specified for the procedure:

(lambda (<formal-parameters>) <body>)

#+BEGIN_SRC scheme
(lambda (x) (+ x 4))
#+END_SRC

#+BEGIN_SRC scheme
(lambda (x) (/ 1.0 (* x (+ x 2))))
#+END_SRC

#+BEGIN_SRC scheme
(define (pi-sum a b)
  (sum (lambda (x) (/ 1.0 (* x (+ x 2))))
       a
       (lambda (x) (+ x 4))
       b))
#+END_SRC

#+RESULTS:
pi-sum

#+BEGIN_SRC scheme
(* 8 (pi-sum 1 1000))
#+END_SRC

#+RESULTS:
3.139592655589783

#+BEGIN_SRC scheme
(define (integral f a b dx)
  (* (sum f (+ a (/ dx 2.0))
          (lambda (x) (+ x dx))
          b)
     dx))
#+END_SRC

#+RESULTS:
integral

#+BEGIN_SRC scheme
(integral (lambda (x) (* x x x)) 0 1 0.001)
#+END_SRC

#+RESULTS:
.249999875000001

lambda can be used in conjunction with arguments as well, or more generally, in any context where we would normally use a procedure name

#+BEGIN_SRC scheme
((lambda (x y z) (+ x y (square z)))
 1 2 3)
#+END_SRC

#+RESULTS:
12

*** Using let to create local variables

Another use of lambda is in creating local variables. 

Suppose we wish to compute the function 

$f(x, y) = x(1 + xy)^2 + y(1 - y) + (1 + xy)(1 - y)$

which we could also express as 

$a = 1 + xy$
$b = 1 - y$
$f(x, y) = xa^2 + yb + ab$

In writing a procedure to compute f, we would like to include as local variables not only x and y but also the names of intermediate quantities like a and b. One way to accomplish this is to use an auxiliary procedure to bind the local variables.

#+BEGIN_SRC scheme
(define (f x y)
  (define (f-helper a b)
    (+ (* x (square a))
       (* y b)
       (* a b)))
  (f-helper (+ 1 (* x y))
            (- 1 y)))

(f 2 3)
#+END_SRC

#+RESULTS:
78

We could have also used a lambda expression

#+BEGIN_SRC scheme
(define (f x y)
  ((lambda (a b)
     (+ (* x (square a))
        (* y b)
        (* a b)))
   (+ 1 (* x y))
   (- 1 y)))

(f 2 3)
#+END_SRC

#+RESULTS:
78

This is so useful that there is a special form called let to make its use more convenient. Using let, the procedure f could be written as

#+BEGIN_SRC scheme
(define (f x y)
  (let ((a (+ 1 (* x y)))
        (b (- 1 y)))
    (+ (* x (square a))
       (* y b)
       (* a b))))

(f 2 3)
#+END_SRC

#+RESULTS:
78

The general form of a let expression is 

#+BEGIN_SRC scheme
(let ((<var1> <exp1>)
      (<var2> <exp2>)
      ...
      (<varn> <expn>))
  <body>)
#+END_SRC


which is just syntactic sugar for 

#+BEGIN_SRC scheme
((lambda (<var1> ... <varn>)
   <body>)
 <exp1>
 ...
 <expn>)
#+END_SRC

We can see from this equivalence that the scope of a variable specified by a let expression is the body of the let. This implies that

- let allows one to bind variables as locally as possible to where they are to be used

For example, if x is 5, then 

#+BEGIN_SRC scheme
(+ (let ((x 3))
     (+ x (* x 10)))
   x)
#+END_SRC

is 38, where the x at the end is still 5 and the x inside the scope of the let statement is 3.

- The variable's values are computed outside the let. This matters when the expressions that provide the values for the local variables depend upon variables having the same names as the local variables themselves. 

For example, if the value of x is 2, the expression

#+BEGIN_SRC scheme
(let ((x 3)
      (y (+ x 2)))
  (* x y))
#+END_SRC

will have the value 12 because, inside the body of let, x will be 3 and y will be 4 (which is the outer x plus 2)

We could sometimes use definitions instead, like

#+BEGIN_SRC scheme
(define (f x y)
  (define a (+ 1 (* x y)))
  (define b (- 1 y))
  (+ (* x (square a))
     (* y b)
     (* a b)))

(f 2 3)
#+END_SRC

#+RESULTS:
78

We prefer to use let in situations like this and to use internal define only for internal procedures.

*** Exercise 1.34 

Suppose we define the procedure 

#+BEGIN_SRC scheme
(define (f g) (g 2))
#+END_SRC

#+RESULTS:
f

Then we have 

#+BEGIN_SRC scheme
(f square)
#+END_SRC

#+RESULTS:
4

#+BEGIN_SRC scheme
(f (lambda (z) (* z (+ z 1))))
#+END_SRC

#+RESULTS:
6

What happens if we (perversely) ask the interpreter to evaluate the combination (f f)? Explain.

#+BEGIN_SRC scheme
(f f)
#+END_SRC


#+BEGIN_SRC scheme
(f f)
(f (f 2))
(f (f (2 2)))
#+END_SRC

#+BEGIN_SRC scheme
(2 2)
#+END_SRC

The object 2 is not applicable.

** 1.3.3 | Procedures as General Methods

With higher order procedures we begin to see a more powerful kind of abstraction: procedures used to express general methods of computation, independent of the particular functions involved.

*** Finding Roots of Equations by the Half-Interval Method

The half-interval method is a technique for finding roots of an equation $f(x) = 0$, where function is continuous. 

The idea is the following:

If we have points a and b such that $f(a) < 0 < f(b)$, then f must have at least one zero between a and b. 

To locate a 0

- let x be the average of a and b and compute f(x) 
- if f(x) > 0, then f has a zero between a and x
- if f(x) < 0, then f has a zero between x and b
- continue this until the interval is small enough

Since the interval of uncertainty is reduced by half at each step of the process, the number of steps required grows at theta(log(L/T)) where L is the length of the original interval and T is the error tolerance. 

#+BEGIN_SRC scheme
(define (average x y)
  (/ (+ x y) 2))

(define (positive? x)
  (> x 0))

(define (negative? x)
  (not (positive? x)))

(define (search f neg pos)
  (define (close-enough? x y)
    (< (abs (- x y))
       0.001))
  (let ((midpoint (average neg pos)))
    (if (close-enough? neg pos)
        midpoint
        (let ((test (f midpoint)))
          (cond ((positive? test)
                 (search f neg midpoint))
                ((negative? test)
                 (search f midpoint pos))
                (else midpoint))))))
#+END_SRC

#+RESULTS:
#[constant 40 #x2]


This can be awkward to use since we may end up supplying a and b values in which the evaluation of the function at these points does not contain 0. Therefore, we should use a driver function

#+BEGIN_SRC scheme
(define (half-interval f a b)
  (let ((a-val (f a))
        (b-val (f b)))
    (cond ((and (negative? a-val)
                (positive? b-val))
           (search f a b))
          ((and (negative? b-val)
                (positive? a-val))
           (search f b a))
          (else
           (error "Values are not of opposite sign" a b)))))
#+END_SRC


#+BEGIN_SRC scheme
(half-interval cube -1 4)
#+END_SRC

approximate pi as the root between 2 and 4 of sin x = 0

#+BEGIN_SRC scheme
(half-interval sin 2.0 4.0)
#+END_SRC

#+RESULTS:
3.14111328125

Here is the root of the equation $x^3 - 2x - 3 = 0$

#+BEGIN_SRC scheme
(half-interval (lambda (x) (- (cube x) (* 2 x) 3))
               1.0 2.0)
#+END_SRC

#+RESULTS:
1.89306640625

*** Finding fixed points of functions

A number x is called a fixed point of a function if x satisfies the equation $f(x) = x$. For some functions we can locate a fixed point by beginning with an initial guess and applying function repeatedly,

$f(x), f(f(x)), f(f(f(x))), ...$

until the value doesn't change much. 

Using this idea we can devise a procedure that takes as inputs a function and an initial guess and produces an approximation to the fixed point of the function.

#+BEGIN_SRC scheme
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
#+END_SRC

#+RESULTS:
#[constant 40 #x2]


#+BEGIN_SRC scheme
(fixed-point cos 1.0)
#+END_SRC

#+RESULTS:
0.7390822985224024

#+BEGIN_SRC scheme
(fixed-point (lambda (y) (+ (sin y) (cos y)))
             1.0)
#+END_SRC

#+RESULTS:
1.2587315962971173

#+BEGIN_SRC scheme
(define (sqrt x)
  (fixed-point (lambda (y) (/ x y)) 1.0))
#+END_SRC

#+RESULTS:
sqrt

Unfortunately, this does not converge.

y_1
y_2 = x / y_1
y_3 = x / y_2 = x / (x / y_1) = y_1 

This results in an infinite loop in which y_1 and y_2 repeat over and over, oscillating.

One way to control such oscillations is to prevent the guesses from changing so much. Since the answer is always between our guess y and x/y, we can make a new guess that is not as far from y as x/y by averaging y with x/y so that the next guess after y is $y \mapsto \frac{1}{2}(y + \frac{x}{y})$ instead of x/y. 

The process of making such a sequence of guesses is simply the process of looking for a fixed point of this. 

#+BEGIN_SRC scheme
(define (sqrt x)
  (fixed-point (lambda (y) (average y (/ x y))) 1.0))
#+END_SRC

#+RESULTS:
sqrt
sqrt
sqrt

#+BEGIN_SRC scheme
(sqrt 9)
#+END_SRC

y = x / y 
2y = x / y + y 
y = 1/2(x/y + y)

This approach of averaging successive approximations to the solution, a technique called average damping, often aids the convergence of fixed-point searches

*** Exercise 1.35

#+BEGIN_SRC scheme
(fixed-point (lambda (x) (+ 1 (/ 1 x)))
             1.0)
#+END_SRC

#+RESULTS:
1.6180327868852458

*** Exercise 1.36 

Modify fixed-point so that it prints the sequence of approximations it generates 

#+BEGIN_SRC scheme
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (display guess)
    (newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
#+END_SRC

#+RESULTS:
#[constant 40 #x2]
#[constant 40 #x2]


Then find a solution to x^x = 1000

log_x(x^x) = log_x(1000)
x = log_x(1000)
x = log(1000) / log(x)

Without average dampening

#+BEGIN_SRC scheme
(fixed-point (lambda (x) (/ (log 1000)
                       (log x))) 1.5)
#+END_SRC

The output looks like

1.5
17.036620761802716
2.436284152826871
7.7573914048784065
3.3718636013068974
5.683217478018266
3.97564638093712
5.004940305230897
4.2893976408423535
4.743860707684508
4.437003894526853
4.6361416205906485
4.503444951269147
4.590350549476868
4.532777517802648
4.570631779772813
4.545618222336422
4.562092653795064
4.551218723744055
4.558385805707352
4.553657479516671
4.55677495241968
4.554718702465183
4.556074615314888
4.555180352768613
4.555770074687025
4.555381152108018
4.555637634081652
4.555468486740348
4.555580035270157
4.555506470667713
4.555554984963888
4.5555229906097905
4.555544090254035
4.555530175417048
;Value: 4.555539351985717

This took 34 steps, spitting out an answer at 35.

With average dampening:

#+BEGIN_SRC scheme
(fixed-point (lambda (x) (average x (/ (log 1000)
                                  (log x)))) 1.5)
#+END_SRC

1.5
9.268310380901358
6.185343522487719
4.988133688461795
4.643254620420954
4.571101497091747
4.5582061760763715
4.555990975858476
4.555613236666653
4.555548906156018
4.555537952796512
;Value: 4.555536087870658

This took 10 steps, spitting out an answer at 11

*** Exercise 1.37 

1.

#+BEGIN_SRC scheme
(define (cont-frac n d k)
  (define (recur a)
    (if (> a k)
        0
        (/ (n a)
           (+ (d k)
              (recur (+ a 1))))))
  (recur 1))
#+END_SRC

#+BEGIN_SRC scheme
(cont-frac (lambda (i) 1.0)
           (lambda (i) 1.0)
           11)
#+END_SRC

#+RESULTS:
.6180555555555556
.6180555555555556

k must be at least 11 to be accurate to 4 decimal places.

2. 

Iterative Process

#+BEGIN_SRC scheme
(define (cont-frac-iter n d k)
  (define (iter a result)
    (if (= a k)
        result
        (iter (+ a 1)
              (/ (n (- k a))
                 (+ (d (- k a))
                    result)))))
  (iter 0 0))
#+END_SRC

#+RESULTS:
cont-frac-iter
cont-frac-iter
cont-frac-iter

#+BEGIN_SRC scheme
(cont-frac-iter (lambda (i) 1.0)
                (lambda (i) 1.0)
                10)
#+END_SRC

#+RESULTS:
.6179775280898876
