* Logic Programming 
:PROPERTIES:
:header-args: :session scheme :results verbatim raw
:ARCHIVE:
:END:

In a nondeterministic language, expressions can have more than one value, and, as a result, the computation is dealing with relations rather than with single-valued functions. Logic programming extends this idea by combining a relational vision of programming with a powerful kind of symbolic pattern matching called unification. 

When this approach works, we get a very powerful way to write programs. Part of that power comes from the fact that a single "what is" fact can be used to solve a number of different problems that would have different "how to" components. 

** Deductive Information Retrieval

Logic programming excels in providing interfaces to databases for information retrieval. 

** Simple Queries 

The query language allows users to retrieve information from the database by posing queries in response to the system's prompt. 

#+BEGIN_SRC scheme
; query
(job ?x (computer programmer))

; results
(job (Hacker Alyssa P) (computer programmer))
(job (Fect Cy D) (computer programmer))
#+END_SRC

The input query specifies that we are looking for entries in the database that match a certain pattern. 

We can describe the query language's processing of simple queries as follows: 

- The system finds all assignments to variables in the query pattern that satisfy the pattern -- that is, all sets of values for the variables such that if the pattern variables are instantiated with (replaced by) the values, the result is in the database.
- The system responds to the query by listing all instantiations of the query pattern with the variable assignments that satisfy it 

*** Exercise 4.55 

Give simple queries that retrieve the following information from the database: 

1. All people supervised by Ben Bitdiddle 

#+BEGIN_SRC scheme
(supervisor ?x (Bitdiddle Ben))
#+END_SRC

2. The names and jobs of all people in the accounting division 

#+BEGIN_SRC scheme
(job ?x (accounting . ?type))
#+END_SRC

3. The names and addresses of all people who live in slumerville 

#+BEGIN_SRC scheme
(address ?x (Slumerville . ?type))
#+END_SRC

** Compound Queries 

One thing that makes the query language a logic programming language is that the means of combination mirror the means of combination used in forming logical expressions: and, or, and not. 

We can chain them together like so: 

#+BEGIN_SRC scheme
(and (job ?person (computer programmer))
     (address ?person ?where))
#+END_SRC

In general, (and (q1)(q2)...(qn)) is satisfied by all sets of values for the pattern variables that simultaneously satisfy queries 1 through n. 
The same holds for or and not 

There is also a combining form called lisp-value. When lisp-value is the first element of a pattern, it specifies the next element is a lisp predicate to be applied to the rest of the instantiated elements as arguments. In general (lisp-value predicate arg1 ... argn) will be satisfied by assignments to the pattern variables for which the predicate applied to the instantiated arg1 ... argn is true. 

for example: 

#+BEGIN_SRC scheme
(and (salary ?person ?amount)
     (lisp-value > ?amount 30000))
#+END_SRC

*** Exercise 4.56 

Formulate compound queries that retrieve the following information: 

1. The names of all people who are supervised by Ben Bitdiddle and their addresses 

#+BEGIN_SRC scheme
(and (supervisor ?person (Bitdiddle Ben))
     (address ?person ?where))
#+END_SRC

2. All people whose salary is less than Bens, together with their salary and Bens salary 

#+BEGIN_SRC scheme
(and (salary (Bitdiddle Ben) ?amount)
     (salary ?person (lisp-value <= ?new-sal ?amount)))
#+END_SRC

3. All people who are supervised by someone who is not in the computer division, together with the supervisor's name and job 

#+BEGIN_SRC scheme
(and (supervisor ?person ?boss)
     (not (job ?boss (computer . ?type)))
     (job ?boss ?job))
#+END_SRC

** Rules 

In addition to primitive queries and compound queries, the query language provides means for abstracting queries. These are given by rules. 

The rule 

#+BEGIN_SRC scheme
(rule (lives-near ?person-1 ?person-2)
      (and (address ?person-1 (?town . ?rest-1))
           (address ?person-2 (?town . ?rest-2))
           (not (same ?person-1 ?person-2))))
#+END_SRC

specifies that two people live near each other if they live in the same town. 

The same relation is specified by a very simple rule 

#+BEGIN_SRC scheme
(rule (same ?x ?x))
#+END_SRC

The following rule declares that a person is a wheel in an organization if they supervise someone who is in turn a supervisor: 

#+BEGIN_SRC scheme
(rule (wheel ?person)
      (and (supervisor ?middle-manager ?person)
           (supervisor ?x ?middle-manager)))
#+END_SRC

The general form of a rule is 

#+BEGIN_SRC scheme
(rule <conclusion> <body>)
#+END_SRC

where conclusion is a pattern and body is any query. 

As in the case of compound procedures, rules can be used as parts of other rules, or even be defined recursively

For instance, this rule says that a staff person is outranked by a boss in the organization if the boss is the person's supervisor, or (recursively) if the person's supervisor is outranked by the boss. 

#+BEGIN_SRC scheme
(rule (outranked-by ?staff-person ?boss)
      (or (supervisor ?staff-person ?boss)
          (and (supervisor ?staff-person ?middle-manager)
               (outranked-by ?middle-manager ?boss))))
#+END_SRC

*** Exercise 4.57 

Define a rule that says that person 1 can replace person 2 if either person 1 does the same job as person 2 or someone who does person 1's job can also do person 2's job, and if person 1 and person 2 are not the same person 

#+BEGIN_SRC scheme
(rule (replace ?person1 ?person2)
      (and
       ; get p1 job 
       (job ?person1 ?job1)
       ; get p2 job
       (job ?person2 ?job2)
       ; does p1 do the same job as p2? 
       (or (can-do-job ?person1 ?job2)
           ; can someone else do both jobs?
           (and (can-do-job ?person3 ?job1)
                (can-do-job ?person3 ?job2)))
       ; is anyone the same?
       (and (not (same ?person1 ?person2))
            (not (same ?person2 ?person3)))))
#+END_SRC

Using your rule, give queries that find the following: 

1. All people who can replace Cy D. Fect 

#+BEGIN_SRC scheme
(replace ?person (D-Fect Cy))
#+END_SRC

2. All people who can replace someone who is being paid more than they are, together with the two salaries

#+BEGIN_SRC scheme
(and (replace ?person1 ?person2)
     (salary ?person1 ?amount1)
     (salary ?person2 ?amount2)
     (lisp-value < ?amount1 ?amount2))
#+END_SRC


*** Exercise 4.58 

Define a rule that says that a person is a "big shot" in a division if the person works in the division, but does not have a supervisor who works in the division. 

#+BEGIN_SRC scheme
(rule (big-shot ?person)
      (and (job ?person ?division . ?rest)
          (or (and (supervisor ?person ?boss)
                   (not (job ?boss ?division . ?rest)))
              (not (same ?person ?boss)))))
#+END_SRC

*** Exercise 4.59 

Ben adds all his weekly meetings to the Microshaft database by asserting the following: 

#+BEGIN_SRC scheme
(meeting accounting (Monday 9am))
(meeting administration (Monday 10am))
(meeting computer (Wednesday 3pm))
(meeting administration (Friday 1pm))
(meeting whole-company (Wednesday 4pm))
#+END_SRC

1. On Friday mornings, Ben wants to query the database for all the meetings that occur that day. What query should he use? 

#+BEGIN_SRC scheme
(meeting ?dept (Friday ?time))
#+END_SRC

2. Alyssa thinks it would be more useful to ask for her meetings by specifying her name. She designs a rule that says that a person's meetings include all whole-company meetings plus all meetings of that person's division. Fill in the body of her rule: 

#+BEGIN_SRC scheme
(rule (meeting-time ?person ?day-and-time)
      (or (meeting whole-company (?day-and-time))
          (and (job ?person (?dept . ?rest))
               (meeting ?dept (?day-and-time)))))
#+END_SRC

3. Alyssa wonders what meetings she has to attend on Wednesday. What query should she make to find out? 

#+BEGIN_SRC scheme
(meeting-time (P.Hacker Alyssa) (Wednesday . ?time))
#+END_SRC

*** Exercise 4.60 

Alyssa notices that when she gives a query that is symmetric, she gets both results back and there appears to be duplicates. Why does this happen? 

- This happens because the relation is symmetric, i.e. arb <-> bra

Is there a way to find a list of people who line near each other, in which each pair appears only once? 

You could sort each tuple alphabetically and remove duplicates. 

** Logic as Programs 

We can regard a rule as a kind of logical implication: If an assignment of values to pattern variables satisfies the body, then it satisfies the conclusion. Consequently, we can regard the query language as having the ability to perform logical deductions based upon the rules. 

Consider the append operation characterized by the following two rules: 

- For any list y, the empty list and y append to form y
- For any u, v, y, z, (cons u v) and y append to form (cons u z) if v and y append to form z

To express this in our query language, we define two rules for a relation: 

#+BEGIN_SRC scheme
; x and y append to form z
(append-to-form x y z)

; holds for any value of ?y
(rule (append-to-form () ?y ?y))

(rule (append-to-form (?u . ?v) ?y (?u . ?z))
      (append-to-form ?v ?y ?z))
#+END_SRC


Given these two rules, we can formulate queries that compute the append of two lists: 

#+BEGIN_SRC scheme
; input
(append-to-form (a b) (c d) ?z)

; result
(append-to-form (a b) (c d) (a b c d))
#+END_SRC

We can also ask for all pairs of lists that append to form (a b c d)

#+BEGIN_SRC scheme
(append-to-form ?x ?y (a b c d))

(() (a b c d))
((a) (b c d))
((a b) (c d))
((a b c) (d))
((a b c d) ())
#+END_SRC

*** Exercise 4.61 

The following rules implement a next-to relation that finds adjacent elements of a list 

#+BEGIN_SRC scheme
(rule (?x next-to ?y in (?x ?y . ?u)))
(rule (?x next-to ?y in (?v . ?z))
      (?x next-to ?y in ?z))
#+END_SRC

What will be the response for the following queries?

#+BEGIN_SRC scheme
; query 
(?x next-to ?y in (1 (2 3) 4))

; response
(1 (2 3))
((2 3) 4)
#+END_SRC

#+BEGIN_SRC scheme
; query
(?x next-to 1 in (2 1 3 1))

; response
(2)
(3)
#+END_SRC

*** Exercise 4.62 

Define rules to implement the last-pair operation, which returns a list containing the last element of a nonempty list.

#+BEGIN_SRC scheme

#+END_SRC

Check the rules on queries like 

#+BEGIN_SRC scheme
(last-pair (3) ?x)
(last-pair (1 2 3) ?x)
(last-pair (2 ?x) (3))
(last-pair ?x (3))
#+END_SRC
