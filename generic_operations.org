* Systems with Generic Operations 
:PROPERTIES:
:header-args: :session scheme :results value
:ARCHIVE:
:END:

In the previous section, we saw how to design systems in which data objects can be represented in more than one way. The key idea is to link the code that specifies the data operations to the several representations by means of generic interface procedures. 

Now we will see how to use this same idea not only to define operations that are generic over different representations but also to define operations that are generic over different kinds of arguments. 



#+DOWNLOADED: /tmp/screenshot.png @ 2020-03-20 21:26:07
[[file:Systems with Generic Operations/screenshot_2020-03-20_21-26-07.png]]

** General Arithmetic Operations 

We would like, for instance, to have a generic addition procedure add that acts like ordinary addition on ordinary numbers, like add-rat on rational numbers, and like add-complex on complex numbers. 

We can implement this in a manner akin to how we implemented the generic selectors for complex numbers in the last section. 

#+BEGIN_SRC scheme
(define (add x y)
  (apply-generic 'add x y))

(define (sub x y)
  (apply-generic 'sub x y))

(define (mul x y)
  (apply-generic 'mul x y))

(define (div x y)
  (apply-generic 'div x y))
#+END_SRC

#+RESULTS:
: div

We begin by installing a package for handling ordinary numbers, the primitives of our language. We will tag these with the symbol scheme-number. 

Since these operations each take two arguments, they are installed in the table keyed by the list (scheme-number scheme-number). 

#+BEGIN_SRC scheme
(define (install-scheme-number-package)
  (define (tag x) (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'make 'scheme-number
       (lambda (x) (tag x)))
  'done)
#+END_SRC

Users of the scheme-number package will create tagged ordinary numbers by means of the procedure: 

#+BEGIN_SRC scheme
(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))
#+END_SRC

Now that our initial framework is in place, we can readily include new numbers. As a benefit of additivity, we can use without modification code from the rational number package in 2.1.1

#+BEGIN_SRC scheme
(define (install-rational-package)
  ; internal procedures 
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g)
            (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x)
                    (denom y)))
              (* (denom x)
                 (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x)
                    (denom y))
                 (* (numer y)
                    (denom x)))
              (* (denom x)
                 (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x)
                 (numer y))
              (* (denom x)
                 (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x)
                 (denom y))
              (* (denom x)
                 (numer y))))
  ; interface with the rest of the system
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  'done)

(define (make-rational n d)
  ((get 'make 'rational) n d))
#+END_SRC

We can install a similar package to handle complex numbers using the tag complex. 

In creating the package we extract from the table the operations make-from-real-imag and make-from-mag-ang defined by the polar and rectangular packages. 

#+BEGIN_SRC scheme
(define (install-complex-package)
  ; imported procedures from the rectangular and polar packages
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  ; internal procedures 
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1)
                            (real-part z2))
                         (+ (imag-part z1)
                            (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1)
                            (real-part z2))
                         (- (imag-part z1)
                            (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1)
                          (magnitude z2))
                       (+ (angle z1)
                          (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1)
                          (magnitude z2))
                       (- (angle z1)
                          (angle z2))))
  ; interface to the rest of the system 
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
       (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
       (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
       (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
       (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'make-from-real-imag 'complex
       (lambda (r i) (tag (make-from-real-imag r i))))
  (put 'make-from-mag-ang 'complex
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))

(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))
#+END_SRC

*** Exercise 2.77 

Louis Reasoner tries to evaluate the expression (magnitude z) where z is the object 


#+DOWNLOADED: /tmp/screenshot.png @ 2020-03-20 22:17:23
[[file:Systems with Generic Operations/screenshot_2020-03-20_22-17-23.png]]

Instead of the answer 5 he gets an error message from apply-generic saying that there is no method for the operation magnitude on the types (complex). 

He shows the problem to Alyssa P. Hacker, who says "The problem is that the complex number selectors were never defined for complex numbers, just for polar and rectangular numbers. All you have to do to make this work is add the following to the complex package:"

#+BEGIN_SRC scheme
(put 'real-part '(complex) real-part)
(put 'imag-part '(complex) imag-part)
(put 'magnitude '(complex) magnitude)
(put 'angle '(complex) angle)
#+END_SRC

#+RESULTS:

Describe in detail why this works. 

From the text in the book below this particular diagram, we see that this is an example of a two tag system. What is going on here is that Louis wishes to access the selectors for a polar complex number, but he is using it on a 2-tag deep system. 

What Alyssa does it provide a set of selectors which essentially add a way to pass through the first complex layer and pull the selectors for rectangular and polar numbers up. 

As an example, trace through all the procedures called in evaluating (magnitude z). In particular, how many times is apply-generic invoked? What procedure is dispatched in each case? 

#+BEGIN_SRC scheme
(magnitude z)

(apply-generic 'magnitude z)

(define (apply-generic op . args)
    (let ((type-tags (map type-tag args)))
      (let ((proc (get op type-tags)))
        (if proc
            (apply proc (map contents args))
            (error
             "No method for these types: APPLY-GENERIC"
             (list op type-tags))))))

    (let ((type-tags (map '(complex) z)))
      (let ((proc (get magnitude type-tags)))
        (if proc
            (apply magnitude (map contents z))
            (error
             "No method for these types: APPLY-GENERIC"
             (list magnitude type-tags)))))

; When magnitude is applied to (map contents z) we move from complex to 'rectangular

    (let ((type-tags (map '(rectangular) z)))
      (let ((proc (get magnitude type-tags)))
        (if proc
            (apply magnitude (map contents z))
            (error
             "No method for these types: APPLY-GENERIC"
             (list magnitude type-tags)))))

; when magnitude is applied to (map contents z) with the rectangular tag it returns the procedure for calculating magnitude from a rect num
(apply magnitude (map contents z))
(apply (lambda (z) (sqrt (+ (square (real-part z))
                       (square (imag-part z)))))
       (contents z))

(+ (square 3)
   (square 4))

(sqrt (+ 9 16))
5
#+END_SRC

apply-generic is invoked 2 times since this is a two layer structure. It would be applied n times for a structure with n tags. In the first case, the procedure contents strips off the complex tag. 

In the second case, it recognizes the rectangular tag and applies the magnitude function to it. 

*** Exercise 2.78 

The internal procedures in the scheme-number package are essentially nothing more than calls to the primitive procedures +, -, etc. It was not possible to use the primitives of the language directly because our type-tag system requires that each data object have a type attached to it. 

In fact, all Lisp implementations have a type system, which they use internally. Primitive predicates such as symbol? and number? determine whether data objects have particular types. 

Modify the definitions of type-tag, contents, and attach-tag from section 2.4.2 so that our generic system takes advantage of Scheme's internal type system. The system should work the same as before, except that ordinary numbers should be represented simply as Scheme numbers rather than as pairs whose car is the symbol scheme-number. 

Original definitions: 

#+BEGIN_SRC scheme
(define (attach-tag type-tag contents)
  (cons type-tag contents))

(define (type-tag datum)
  (if (pair? datum)
      (car datum)
      (error "Bad tagged datum: TYPE-TAG" datum)))

(define (contents datum)
  (if (pair? datum)
      (cdr datum)
      (error "Bad tagged datum: CONTENTS" datum)))
#+END_SRC

#+BEGIN_SRC scheme
(define (attach-tag type-tag contents)
  (if (number? contents)
      contents
      (cons type-tag contents)))

(define (type-tag datum)
  (cond ((number? datum) datum)                
        ((pair? datum) (car datum))
        (else (error "Bad tagged datum: TYPE-TAG" datum))))

(define (contents datum)
  (cond ((number? datum) datum)
        ((pair? datum) (cdr datum))
        (else (error "Bad tagged datum: CONTENTS" datum))))
#+END_SRC

*** Exercise 2.79 

Define a generic equality predicate equ? that tests the equality of two numbers, and install it in the generic arithmetic package. This operation should work for ordinary numbers, rational numbers, and complex numbers. 

#+BEGIN_SRC scheme
(define (install-scheme-number-package)
  (put 'equ? '(scheme-number-package) =)
  'done)

(define (install-rational-package)
  (define (equ? x y)
       (= (* (numer x)
             (denom y))
          (* (numer y)
             (denom x))))
  (put 'equ? '(rational rational) equ?)
  'done)

(define (install-rectangular-package)
  (define (equ? a b)
    (and (= (real-part a)
            (real-part b))
         (= (imag-part a)
            (imag-part b))))
  (put 'equ? '(rectangular rectangular) equ?)
  'done)

(define (install-polar-package)
  (define (equ? a b)
    (cond ((and (= 0 (magnitude x))
                (= 0 (magnitude y)))
           #t)
          ((and (= (modulo (magnitude x) (* 2 pi))
                   (modulo (magnitude x) (* 2 pi)))
                (= (angle x)
                   (angle y)))
           #t)
          (else #f)))
  (put 'equ? '(complex complex) equ?)
  'done)

(define (install-complex-package)
  (install-rectangular-package)
  (install-complex-package))
#+END_SRC

*** Exercise 2.80 

Define a generic predicate =zero? that tests if its argument is zero, and install it in the generic arithmetic package. This operation should work for primary, rational, and complex numbers. 

#+BEGIN_SRC scheme
; scheme number
(put '=zero?
     '(scheme-number)
     (lambda (x) (= x 0)))

; rational number
(put '=zero?
     '(rational)
     (lambda (x) (= (numer x) 0))) 

; rectangular complex number 
(put '=zero?
     '(complex rectangular)
     (lambda (x) (and (= (real-part x) 0)
                 (= (imag-part y) 0))))

; polar complex number
(put '=zero?
     '(complex polar)
     (lambda (x) (= (magnitude x) 0)))
#+END_SRC

** Combining Data of Different Types 

A problem arises: The operations that we have defined so far treat different data types as being completely independent. We have packages for performing operations on two numbers of the same type, but we have ignored the prospect of performing operations on two different types. 

One way to handle cross-type operations is to design a different procedure for each possible combination of types for which the operation is valid. For example, we could build something like this for all the combinations:

#+BEGIN_SRC scheme
; include in the complex package
(define (add-complex-to-schemenum z x)
  (make-from-real-imag (+ (real-package z) x)
                       (imag-part z)))

(put 'add '(complex scheme-number)
     (lambda (z x) (tag (add-complex-to-scheme-num z x))))
#+END_SRC

This works, but is cumbersome and scales poorly as we add representations.

This method also undermines our ability to combine separate packages additively, or at least limit the extent to which the implementors of packages need to take account of other packages. 

** Coercion 

Fortunately, we can do better than implementing cross type operations for every data type by taking advantage of additional structure that may be latent in our type system. 

There may be ways by which objects of one type may be viewed as being of another type. This process is called coercion. 

In general, we can implement this idea by designing coercion procedures that transform an object of one type into an equivalent object of another type. Here is a typical coercion procedure:
 
#+BEGIN_SRC scheme
(define (scheme-number->complex n)
  (make-complex-from-real-imag (contents n) 0))
#+END_SRC 

We install these coercion procedures in a special coercion table, indexed under the names of the two types:

#+BEGIN_SRC scheme
(put-coercion 'scheme-number
              'complex
              scheme-number->complex)
#+END_SRC

We are assuming that there are put-coercion and get-coercion procedures available for manipulating this table. Once this table has been set up, we can handle coercion in a uniform manner by modifying the apply-generic procedure. 

When we try to apply an operation, we must first check whether the operation is defined for the arguments types. If its not, then we check the coercion table, otherwise we try coercion. If objects of the first type can not be coerced to the second type, we try the other way around.

#+BEGIN_SRC scheme
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map content args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cdr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (let ((t1->t2 (get-coercion type1 type2))
                      (t2->t1 (get-coercion type2 type1)))
                  (cond (t1->t2
                         (apply-generic op (t1->t2 a1) a2))
                        (t2->t1
                         (apply-generic op a1 (t2->t1 a2)))
                        (else (error "No method for these types"
                                     (list op type-tags))))))
              (error "No method for these types"
                     (list op type-tags)))))))
#+END_SRC


Although we still need to write coercion procedures to relate the types (possibly up to n^2 procedures for n types), we need to write only one procedure for each pair of types rather than a different procedure for each collection of types and each generic operation. We are counting on the fact that the appropriate transformation between types depends only on the types themselves, not on the operations being applied. 

On the other hand, there may be operations for which our coercion scheme is not general enough. Even when neither of the objects to be combined can be converted to the type of the other, it may still be possible to perform the operation by converting both objects to a third type. 

** Hierarchies of Types

The coercion scheme above relied on the existence of natural relations between pairs of types. Often there is a more global structure in how the different types relate to each other. 

For instance, if we consider the number systems we use in mathematics, it makes sense to define an integer as a special case of a rational number, a rational number a special case of a real number, and a real number a special case of a complex number. 

What we have is a hierarchy of types. Then integers are a subtype of rational numbers and rational numbers are a super type of integers. 

If we have a hierarchy in which each element has at most one super and one subtype, we have a tower. If we have a tower structure, to add a new type we need only specify for which element it is a subtype and for which element it is a supertype. 

As such, we can redesign our apply-generic procedure in the following way:

For each type, we need to supply a raise procedure which raises objects to that type one level higher in the tower. Then when the system is required to operate on objects of different types it can successively raise the lower types until all the objects are at the same level in the tower. 

Another advantage of a tower is that we can easily implement the notion that every type inherits all operations defined on a supertype. For instance, if we do not supply a special procedure for finding the real part of an integer, we should still expect that real-part would be defined on integers by virtue of the fact that integers are a subtype of complex numbers. 


#+DOWNLOADED: /tmp/screenshot.png @ 2020-03-22 11:37:11
[[file:Systems with Generic Operations/screenshot_2020-03-22_11-37-11.png]]

** Inadequacies of Hierarchies 

In general, a type may have more than one subtype and/or supertype. Multiple supertypes are particularly troublesome because it means that there is no "correct" way to raise a type in a hierarchy. 

*** Exercise 2.81 

Louis Reasoner has noticed that apply-generic may try to coerce the arguments to each other's type even if they already have the same type. Therefore, he reasons, we need to put procedures in the coercion table to coerce arguments of each type to their own type. 

For example, in addition to the scheme-number->complex coercion, he would do 

#+BEGIN_SRC scheme
(define (scheme-number->scheme-number n) n)
(define (complex->complex z) z)

(put-coercion 'scheme-number
              'scheme-number
              scheme-number->scheme-number)

(put-coercion 'complex
              'complex
              complex->complex)
#+END_SRC

a. With Louis' coercion procedures installed, what happens if apply-generic is called with two arguments of type scheme-number or two arguments of type complex for an operation that is not found in the table of those two types? 

For example, assume that we've defined a generic exponentiation operation:

#+BEGIN_SRC scheme
(define (exp x y) (apply-generic 'exp x y))
#+END_SRC

and have put a procedure for exponentiation in the scheme-number package but not in any other package:

#+BEGIN_SRC scheme
(put 'exp '(scheme-number scheme-number)
     (lambda (x y) (tag (expt x y))))
#+END_SRC

What happens if we call exp with two complex numbers are arguments? 

--------------------

Suppose we use the following apply-generic:

#+BEGIN_SRC scheme
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args))) 
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map content args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cdr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (let ((t1->t2 (get-coercion type1 type2))
                      (t2->t1 (get-coercion type2 type1)))
                  (cond (t1->t2
                         (apply-generic op (t1->t2 a1) a2))
                        (t2->t1
                         (apply-generic op a1 (t2->t1 a2)))
                        (else (error "No method for these types"
                                     (list op type-tags))))))
              (error "No method for these types"
                     (list op type-tags))))))) 
#+END_SRC

Then, when apply-generic sees that our arguments are scheme-numbers, it will try to coerce it to a scheme-number. Then we will be stuck in a loop. 

b. Is Louis correct that something had to be done about coercion with arguments of the same type, or does apply-generic work correctly as is? 

Apply generic should catch the first coercion and then work the second time around. 

c. Modify apply-generic so that it doesn't try coercion if the two arguments have the same type.

#+BEGIN_SRC scheme
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args))) 
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map content args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cdr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (if (equal? type1 type2)
                    (do-nothing type-tags)
                    (let ((t1->t2 (get-coercion type1 type2))
                          (t2->t1 (get-coercion type2 type1)))
                      (cond (t1->t2
                             (apply-generic op (t1->t2 a1) a2))
                            (t2->t1
                             (apply-generic op a1 (t2->t1 a2)))
                            (else (error "No method for these types"
                                         (list op type-tags)))))))
              (error "No method for these types"
                     (list op type-tags))))))) 
#+END_SRC

*** Exercise 2.82

Show how to generalize apply-generic to handle coercion in the general case of multiple arguments. One strategy is to attempt to coerce all the arguments to the type of the first argument, then to the type of the second argument, and so on.



Give an example of a situation where this strategy is not sufficiently general. 


skipping some exercises due to the frustration of code that is not checkable. 

** Example: Symbolic Algebra 

The manipulation of symbolic algebraic expressions is a complex process that illustrates many of the hardest problems that occur in the design of large-scale systems. We can, in essence, view an algebraic expression as a tree of operators applied to operands.  

Instead of implementing a full system, we will instead focus on a simple, but important, part of algebraic manipulation: the arithmetic of polynomials. 

*** Arithmetic on Polynomials 

We will define a polynomial to be a sum of terms, each of which is either a coefficient, a power of the indeterminate, or a product of a coefficient and a power of the indeterminate. A coefficient is defined as an algebraic expression that is not dependent upon the indeterminate of the polynomial. 

We will approach the design of our system by following the familiar discipline of data abstraction. 

#+BEGIN_SRC scheme
(define (same-variable? v1 v2)
  (and (variable? v1)
       (variable? v2)
       (eq? v1 v2)))

(define (add-poly p1 p2)
  (if (same-variable? (variable p1)
                      (variable p2))
      (make-poly (variable p1)
                 (add-terms (term-list p1)
                            (term-list p2)))
      (error "Polys not in same var: ADD-POLY" (list p1 p2))))

(define (mult-poly p1 p2)
  (if (same-variable? (variable p1) (variable p2))
      (make-poly (variable p1)
                 (mul-terms (term-list p1)
                            (term-list p2)))
      (error "Polys not in the same var: MUL-POLY" (list p1 p2))))
#+END_SRC

To incorporate polynomials into our generic type arithmetic system, we need to supply them with type tags. 

#+BEGIN_SRC scheme
(define (install-polynomial-package)
  ; internal procedures 
  ; representation of poly
  (define (make-poly variable term-list)
    (cons variable term-list))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))
  (define (same-variable? v1 v2)
    (and (variable? v1)
         (variable? v2)
         (eq? v1 v2)))
  (define (variable? x) (symbol? x))
  ; representation of terms and term lists 
  <procedures adjoin-term ... coeff from text below>
  (define (add-poly p1 p2) ...)
  <procedures used by add-poly>
  (define (mul-poly p1 p2) ...)
  <procedures used by mul-poly>
  ; interface to the rest of the system
  (define (tag p) (attach-tag 'polynomial p))
  (put 'add '(polynomial polynomial)
       (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'mul '(polynomial polynomial)
       (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put 'make 'polynomial
       (lambda (var terms) (tag (make-poly var terms))))
  'done)
#+END_SRC

Polynomial addition is performed termwise. Terms of the same order must be combined. This is done by forming a new term of the same order whose coefficient is the sun of the coefficients of the addends. 

In order to manipulate term lists, we will assume that we have a constructor the-empty-termlist that returns an empty list and a constructor adjoin-term that adjoins a new term to a term-list. 

We also assume we have a predicate empty-termlist that tells if a given term list is empty, a selector first-term that extracts the highest order term from a term list, and a selector rest-terms that returns all but the highest order term from a term list. 

To manipulate terms, we will suppose we have a constructor make-term that constructs a term with given order and coefficient, and selectors order and coeff that return the order and coefficient of the term. 

#+BEGIN_SRC scheme
(define (add-terms l1 l2)
  (cond ((empty-termlist? l1) l2)
        ((empty-termlist? l2) l1)
        (else
         (let ((t1 (first-term l1))
               (t2 (first-term l2)))
           (cond ((> (order t1)
                     (order t2))
                  (adjoin-term
                   t1 (add-terms (rest-terms l1) l2)))
                 ((< (order t1)
                     (order t2))
                  (adjoin-term
                   t2 (add-terms l1 (rest-terms l2))))
                 (else
                  (adjoin-term
                   (make-term (order t1)
                              (add (coeff t1)
                                   (coeff t2)))
                   (add-terms (rest-terms l1)
                              (rest-terms l2)))))))))
#+END_SRC

The most important thing to note is that we used the generic addition procedure add to add together the coefficients of the terms being combined. This has powerful consequences, as we will see. 

For multiplication, we multiply each term of the first list by all the terms of the other list, repeatedly using mul-term-by-all-terms. The resulting term lists are accumulated into a sum. Multiplying two terms forms a term whose order is the sum of the orders of the factors and whose coefficient is the product of the coefficients of the factors. 

#+BEGIN_SRC scheme
(define (mul-terms l1 l2)
  (if (empty-termlist? l1)
      (the-empty-termlist)
      (add-terms (mul-terms-by-all-terms (first-term l1) l2)
                 (mul-terms (rest-terms l1) l2))))

(define (mul-terms-by-all-terms t1 l1)
  (if (empty-termlist? l1)
      (the-empty-termlist)
      (let ((t2 (first-term l1)))
        (adjoin-term
         (make-term (+ (order t1)
                       (order t2))
                    (mul (coeff t1)
                         (coeff t2)))
         (mul-terms-by-all-terms t1 (rest-terms l1))))))
#+END_SRC

Notice that since we use the generic procedures add and mul, our polynomial package is automatically able to handle any type of coefficient that is known about by the generic arithmetic package. 

*** Representing Term Lists 

A term list is, in effect, a set of coefficients keyed by the order of the term. Our procedures add-terms and mul-terms always access term lists sequentially from the highest to lowest order. Thus, we should use some kind of ordered list representation. 

We will assume that term lists are represented as lists of terms, arranged high to low in order. 

#+BEGIN_SRC scheme
(define (adjoin-term term term-list)
  (if (=zero? (coeff term))
      term-list
      (cons term term-list)))

(define (the-empty-termlist) '())

(define (first-term termlist)
  (car termlist))

(define (rest-terms termlist)
  (cdr termlist))

(define (empty-termlist? termlist)
  (null? termlist))

(define (make-term order coeff)
  (list order coeff))

(define (order term)
  (car term))

(define (coeff term)
  (cadr term))

(define (make-polynomial var terms)
  ((get 'make 'polynomial) var terms))
#+END_SRC

*** Exercise 2.87 

Install =zero? for polynomials in the generic arithmetic package. This will allow adjoin-term to work for polynomials with coefficients that are themselves polynomials. 

#+BEGIN_SRC scheme
(define (=zero? polynomial)
  (empty-termlist? (term-list polynomial)))
#+END_SRC

*** Exercise 2.88

Extend the polynomial system to include subtraction of polynomials. 

#+BEGIN_SRC scheme
(define (negate x) (apply-generic 'negate x))

; define for scheme-numbers
(put 'negate 'scheme-number
     (lambda (n) (tag (- n))))

; define for rational numbers 
(put 'negate 'rational
     (lambda (r) (make-rational (- (numer r))
                           (denom r))))

; define for complex numbers
(put 'negate 'complex
     (lambda (z) (make-from-real-imag (- (real-part z))
                                 (- (imag-part z)))))

; define for polynomials 
(define (negate-terms termlist)
  (if (empty-termlist? termlist)
      termlist
      (let (t ((first-term termlist)))
        (adjoin-term (make-term (order t)
                                (negate (coeff t)))
                     (negate-terms (rest-terms termlist))))))

(put 'negate 'polynomial
     (lambda (poly) (make-polynomial (variable poly)
                                (negate-terms (term-list poly)))))

(put 'sub '(polynomial polynomial)
     (lambda (x y) (tag (add-poly x (negate y)))))
#+END_SRC

*** Exercise 2.90

Suppose we want a system that is efficient for both sparse and dense polynomials. 

*** Hierarchies of Types in Symbolic Algebra 

Our polynomial system shows how objects of one type (polynomials) may in fact be complex objects that have objects of many different types as parts. With generic operations, we need only define the appropriate generic operations for the parts. 

** Extended Exercise : Rational Functions 

We can extend our generic arithmetic system to include rational functions. These are fractions whose numerator and denominator are polynomials. 

We seek to be able to add, subtract, multiply, and divide rational functions. 

*** Exercise 2.93 

Modify the rational-arithmetic package to use generic operations, but change make-rat so that it does not attempt to reduce fractions to lowest terms. 

#+BEGIN_SRC scheme
(define (install-rational-package)
  ; internal procedures
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d) (cons n d))
  (define (add-rat r1 r2)
    (make-rat (add (mul (numer r1) (denom r2))
                   (mul (numer r2) (denom r1)))
              (mul (denom r1) (denom r2))))
  (define (sub-rat r1 r2)
    (make-rat (sub (mul (numer r1) (denom r2))
                   (mul (numer r2) (denom r1)))
              (mul (denom x) (denom y))))
  (define (div-rat r1 r2)
    (make-rat (mul (numer r1) (denom r2))
              (mul (numer r2) (denom r1))))
  ; interface with system
  )
#+END_SRC

We can reduce polynomial fractions to lowest terms using the same idea we used with integers: modifying make-rat to divide both the numerator and the denominator by theri greatest common divisor. 

#+BEGIN_SRC scheme
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (gcd-terms a b)
  (if (empty-termlist? b)
      a
      (gcd-terms b (remainder-terms a b))))
#+END_SRC

*** Exercise 2.94 

Using div-terms implement the procedure remainder-terms and use this to define gcd-terms as above.

#+BEGIN_SRC scheme
(define (remainder-terms a b)
  (cadr (div-terms a b)))
#+END_SRC

Now write a procedure gcd-poly that computes the polynomial GCD of two polys. 

#+BEGIN_SRC scheme
(define (gcd-poly p1 p2)
  (if (same-variable? (variable p1)
                      (variable p2))
      (make-poly (variable p1)
                 (gcd-terms (term-list p1)
                            (term-list p2)))
      (error "Polys are not the same variable -- GCD-POLY" (list p1 p2))))
#+END_SRC

Install in the system a generic operation greatest-common-divisor that reduce to gcd-poly for polynomials and to ordinary gcd for ordinary numbers. 

#+BEGIN_SRC scheme
(define (greatest-common-divisor a b)
  (apply-generic 'greatest-common-divisor a b))

(put 'greatest-common-divisor '(polynomial polynomial)
     (lambda (a b) (tag (gcd-poly a b))))
#+END_SRC

*** Exercise 2.95 

Skipping the rest

Per the note: 

Zippel's Algorithm is an efficient and elegant method for computing polynomial GCDs

From Mathoverflow: 

There are several algorithms to compute the gcd of two multivariate polynomials over rings. I'll mention an algorithm by Zippel which is widely used.

Zippel's Algorithm [1]

This is a probabilistic algorithm which uses a combination of dense and sparse interpolation to construct the GCD of polynomials. It is based on the observation that evaluating a polynomial at a random point will almost never yield zero (Schwartz-Zippel lemma) [1]. So, if a coefficient is determined to be zero somewhere in the interpolation process, the algorithm assumes it to be zero everywhere.

Zippel's Algorithm requires a bound on partial degree in each variable d as an input. We substitute randomly chosen integers (starting point) for all but one variable. The solution is built up by interpolating for one variable at a time.The first polynomial produced involving a particular variable is done via dense interpolation. This polynomial is then used as a skeleton for a number of sparse interpolation. These sparse interpolations are used to introduce the next variable. After finding GCD modulo a prime, we treat it as a skeleton for finding the GCD modulo some other prime. The final polynomial is constructed using Chinese Remainder Algorithm.

The correctness algorithm depends on the accuracy of the skeletal polynomials. Skeletal polynomials will have missing terms if some coefficients are zero at the starting point. But this happens rarely as the total number of zeros are bounded by Schwartz-Zippel lemma, which states that if the integers in starting point are chosen from a subset S of a field, then probability of a coefficient being zero is bounded by d/|S|, where d is the total degree of the coefficient.

The algorithm performs O(ndt) evaluations for the interpolation process and runs in O(ndt3) operations, where n is the number of variables, d is the degree in each variable and t is the number of terms in the final polynomial. The algorithm still has some issues which can be found in [2] along with the ways in which they have been resolved.

Take a look at [3] for a deterministic algorithm by Ben-Or and Tivari.

[1] Zippel, Richard. ”Probabilistic algorithms for sparse polynomials.” Symbolic and algebraic computation (1979): 216-226.

[2] de Kleine, Jennifer, Michael Monagan, and Allan Wittkopf. ”Algorithms for the Non-monic case of the Sparse Modular GCD Algorithm.” Proceedings of the 2005 international symposium on Symbolic and algebraic computation. ACM, 2005.

[3] Ben-Or, Michael, and Prasoon Tiwari. ”A deterministic algorithm for sparse multivariate polynomial interpolation.” Proceedings of the twentieth annual ACM symposium on Theory of computing. ACM, 1988.
